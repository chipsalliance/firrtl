/*
Copyright (c) 2014 - 2016 The Regents of the University of
California (Regents). All Rights Reserved.  Redistribution and use in
source and binary forms, with or without modification, are permitted
provided that the following conditions are met:
   * Redistributions of source code must retain the above
     copyright notice, this list of conditions and the following
     two paragraphs of disclaimer.
   * Redistributions in binary form must reproduce the above
     copyright notice, this list of conditions and the following
     two paragraphs of disclaimer in the documentation and/or other materials
     provided with the distribution.
   * Neither the name of the Regents nor the names of its contributors
     may be used to endorse or promote products derived from this
     software without specific prior written permission.
IN NO EVENT SHALL REGENTS BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT,
SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS,
ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
REGENTS HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
REGENTS SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE. THE SOFTWARE AND ACCOMPANYING DOCUMENTATION, IF
ANY, PROVIDED HEREUNDER IS PROVIDED "AS IS". REGENTS HAS NO OBLIGATION
TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR
MODIFICATIONS.
*/

package firrtl

import com.typesafe.scalalogging.LazyLogging
import java.io.Writer

import Utils._
import firrtl.passes._


// ===========================================
//                 Annotations
// -------------------------------------------
case class AnnotationException(message: String) extends Exception(message)
trait Named { def name: String }
case class ModuleName(name: String) extends Named
case class ComponentName(name: String, module: ModuleName) extends Named

// - Associated with an arbitrary serializable annotation
trait Annotation {
   def serialize: String
}

// - Used to identify which annotation is consumed by which pass
trait CircuitAnnotationKind
case object UnknownCAKind extends CircuitAnnotationKind

// - A collection of annotations on a given circuit
// - Call update to keep annotations synced with circuit after
//    a transformation modifies module or component names
trait CircuitAnnotation {
   def kind: CircuitAnnotationKind
   def update (renames: RenameMap): CircuitAnnotation
}

// - A class that contains a map from old name to modified names
// - Generated by transformations that modify names
trait RenameMap { def map: Map[Named, Seq[Named]] }
case class BasicRenameMap(map: Map[Named,Seq[Named]]) extends RenameMap


// ===========================================
//                 Transforms
// -------------------------------------------

case class TransformResult (
   circuit: Circuit,
   renames: Option[RenameMap] = None,
   annotation: Option[CircuitAnnotation] = None)

// - Transforms a circuit
// - Can consume multiple CircuitAnnotation's
trait Transform {
   def execute (circuit: Circuit, annotations: Seq[CircuitAnnotation]): TransformResult
}


// ===========================================
//                 Compilers
// -------------------------------------------

case class CompilerResult (circuit: Circuit, annotations: Seq[CircuitAnnotation])

// - A sequence of transformations
// - Call compile to executes each transformation in sequence onto
//    a given circuit.
trait Compiler extends LazyLogging {
   def transforms(w: Writer): Seq[Transform]
   def compile(circuit: Circuit, annotations: Seq[CircuitAnnotation], writer: Writer): CompilerResult = {
      transforms(writer).foldLeft(CompilerResult(circuit,annotations))((in: CompilerResult, xform: Transform) => {
         val result = xform.execute(in.circuit,in.annotations)
         val in_remapped = result.renames match {
            case Some(renames) => in.annotations.map(_.update(renames))
            case None => in.annotations
         }
         val full_annotations = in_remapped ++ result.annotation
         CompilerResult(result.circuit,full_annotations)
      })
   }
}

