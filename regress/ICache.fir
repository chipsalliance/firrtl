; SPDX-License-Identifier: Apache-2.0
circuit ICache :
  module MaxPeriodFibonacciLFSR_1 :
    input clock : Clock
    input reset : Reset
    output io : {flip seed : {valid : UInt<1>, bits : UInt<1>[16]}, flip increment : UInt<1>, out : UInt<1>[16]}

    wire _state_WIRE : UInt<1>[16] @[PRNG.scala 38:28]
    _state_WIRE[0] <= UInt<1>("h01") @[PRNG.scala 38:28]
    _state_WIRE[1] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _state_WIRE[2] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _state_WIRE[3] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _state_WIRE[4] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _state_WIRE[5] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _state_WIRE[6] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _state_WIRE[7] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _state_WIRE[8] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _state_WIRE[9] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _state_WIRE[10] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _state_WIRE[11] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _state_WIRE[12] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _state_WIRE[13] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _state_WIRE[14] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _state_WIRE[15] <= UInt<1>("h00") @[PRNG.scala 38:28]
    reg state : UInt<1>[16], clock with : (reset => (reset, _state_WIRE)) @[PRNG.scala 47:50]
    when io.increment : @[PRNG.scala 61:23]
      node _T = xor(state[15], state[13]) @[LFSR.scala 15:41]
      node _T_1 = xor(_T, state[12]) @[LFSR.scala 15:41]
      node _T_2 = xor(_T_1, state[10]) @[LFSR.scala 15:41]
      state[0] <= _T_2 @[PRNG.scala 62:11]
      state[1] <= state[0] @[PRNG.scala 62:11]
      state[2] <= state[1] @[PRNG.scala 62:11]
      state[3] <= state[2] @[PRNG.scala 62:11]
      state[4] <= state[3] @[PRNG.scala 62:11]
      state[5] <= state[4] @[PRNG.scala 62:11]
      state[6] <= state[5] @[PRNG.scala 62:11]
      state[7] <= state[6] @[PRNG.scala 62:11]
      state[8] <= state[7] @[PRNG.scala 62:11]
      state[9] <= state[8] @[PRNG.scala 62:11]
      state[10] <= state[9] @[PRNG.scala 62:11]
      state[11] <= state[10] @[PRNG.scala 62:11]
      state[12] <= state[11] @[PRNG.scala 62:11]
      state[13] <= state[12] @[PRNG.scala 62:11]
      state[14] <= state[13] @[PRNG.scala 62:11]
      state[15] <= state[14] @[PRNG.scala 62:11]
      skip @[PRNG.scala 61:23]
    when io.seed.valid : @[PRNG.scala 65:25]
      state[0] <= io.seed.bits[0] @[PRNG.scala 66:11]
      state[1] <= io.seed.bits[1] @[PRNG.scala 66:11]
      state[2] <= io.seed.bits[2] @[PRNG.scala 66:11]
      state[3] <= io.seed.bits[3] @[PRNG.scala 66:11]
      state[4] <= io.seed.bits[4] @[PRNG.scala 66:11]
      state[5] <= io.seed.bits[5] @[PRNG.scala 66:11]
      state[6] <= io.seed.bits[6] @[PRNG.scala 66:11]
      state[7] <= io.seed.bits[7] @[PRNG.scala 66:11]
      state[8] <= io.seed.bits[8] @[PRNG.scala 66:11]
      state[9] <= io.seed.bits[9] @[PRNG.scala 66:11]
      state[10] <= io.seed.bits[10] @[PRNG.scala 66:11]
      state[11] <= io.seed.bits[11] @[PRNG.scala 66:11]
      state[12] <= io.seed.bits[12] @[PRNG.scala 66:11]
      state[13] <= io.seed.bits[13] @[PRNG.scala 66:11]
      state[14] <= io.seed.bits[14] @[PRNG.scala 66:11]
      state[15] <= io.seed.bits[15] @[PRNG.scala 66:11]
      skip @[PRNG.scala 65:25]
    io.out[0] <= state[0] @[PRNG.scala 69:10]
    io.out[1] <= state[1] @[PRNG.scala 69:10]
    io.out[2] <= state[2] @[PRNG.scala 69:10]
    io.out[3] <= state[3] @[PRNG.scala 69:10]
    io.out[4] <= state[4] @[PRNG.scala 69:10]
    io.out[5] <= state[5] @[PRNG.scala 69:10]
    io.out[6] <= state[6] @[PRNG.scala 69:10]
    io.out[7] <= state[7] @[PRNG.scala 69:10]
    io.out[8] <= state[8] @[PRNG.scala 69:10]
    io.out[9] <= state[9] @[PRNG.scala 69:10]
    io.out[10] <= state[10] @[PRNG.scala 69:10]
    io.out[11] <= state[11] @[PRNG.scala 69:10]
    io.out[12] <= state[12] @[PRNG.scala 69:10]
    io.out[13] <= state[13] @[PRNG.scala 69:10]
    io.out[14] <= state[14] @[PRNG.scala 69:10]
    io.out[15] <= state[15] @[PRNG.scala 69:10]
  module ICache :
    input clock : Clock
    input reset : UInt<1>
    output auto : {master_out : {a : {flip ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<3>, size : UInt<4>, source : UInt<1>, address : UInt<32>, user : {}, echo : {}, mask : UInt<8>, data : UInt<64>, corrupt : UInt<1>}}, flip d : {flip ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<2>, size : UInt<4>, source : UInt<1>, sink : UInt<2>, denied : UInt<1>, user : {}, echo : {}, data : UInt<64>, corrupt : UInt<1>}}}}
    output io : {flip req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<39>}}, flip s1_paddr : UInt<32>, flip s2_vaddr : UInt<39>, flip s1_kill : UInt<1>, flip s2_kill : UInt<1>, flip s2_prefetch : UInt<1>, resp : {valid : UInt<1>, bits : {data : UInt<32>, replay : UInt<1>, ae : UInt<1>}}, flip invalidate : UInt<1>, errors : {bus : {valid : UInt<1>, bits : UInt<32>}}, perf : {acquire : UInt<1>}, flip clock_enabled : UInt<1>, keep_clock_enabled : UInt<1>}

    clock is invalid
    reset is invalid
    auto is invalid
    io is invalid
    wire tl_out : {a : {flip ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<3>, size : UInt<4>, source : UInt<1>, address : UInt<32>, user : {}, echo : {}, mask : UInt<8>, data : UInt<64>, corrupt : UInt<1>}}, flip d : {flip ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<2>, size : UInt<4>, source : UInt<1>, sink : UInt<2>, denied : UInt<1>, user : {}, echo : {}, data : UInt<64>, corrupt : UInt<1>}}} @[Nodes.scala 1207:84]
    tl_out is invalid @[Nodes.scala 1207:84]
    auto.master_out <- tl_out @[LazyModule.scala 311:12]
    reg scratchpadOn : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[ICache.scala 150:29]
    reg s1_slaveValid : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[ICache.scala 162:30]
    s1_slaveValid <= UInt<1>("h00") @[ICache.scala 162:30]
    reg s2_slaveValid : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[ICache.scala 163:30]
    s2_slaveValid <= s1_slaveValid @[ICache.scala 163:30]
    reg s3_slaveValid : UInt<1>, clock @[ICache.scala 164:30]
    s3_slaveValid <= UInt<1>("h00") @[ICache.scala 164:30]
    node s0_valid = and(io.req.ready, io.req.valid) @[Decoupled.scala 40:37]
    reg s1_valid : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[ICache.scala 169:21]
    reg s1_vaddr : UInt<39>, clock @[Reg.scala 15:16]
    when s0_valid : @[Reg.scala 16:19]
      s1_vaddr <= io.req.bits.addr @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    wire s1_tag_hit : UInt<1>[4] @[ICache.scala 171:24]
    s1_tag_hit is invalid @[ICache.scala 171:24]
    node _s1_hit_T = or(s1_tag_hit[0], s1_tag_hit[1]) @[ICache.scala 172:35]
    node _s1_hit_T_1 = or(_s1_hit_T, s1_tag_hit[2]) @[ICache.scala 172:35]
    node _s1_hit_T_2 = or(_s1_hit_T_1, s1_tag_hit[3]) @[ICache.scala 172:35]
    node _s1_hit_T_3 = mux(s1_slaveValid, UInt<1>("h01"), UInt<1>("h00")) @[ICache.scala 172:46]
    node s1_hit = or(_s1_hit_T_2, _s1_hit_T_3) @[ICache.scala 172:40]
    node _s2_valid_T = eq(io.s1_kill, UInt<1>("h00")) @[ICache.scala 174:38]
    node _s2_valid_T_1 = and(s1_valid, _s2_valid_T) @[ICache.scala 174:35]
    reg s2_valid : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[ICache.scala 174:25]
    s2_valid <= _s2_valid_T_1 @[ICache.scala 174:25]
    reg s2_hit : UInt<1>, clock @[ICache.scala 175:23]
    s2_hit <= s1_hit @[ICache.scala 175:23]
    reg invalidated : UInt<1>, clock @[ICache.scala 177:24]
    reg refill_valid : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[ICache.scala 178:29]
    reg send_hint : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[ICache.scala 179:26]
    node _refill_fire_T = and(tl_out.a.ready, tl_out.a.valid) @[Decoupled.scala 40:37]
    node _refill_fire_T_1 = eq(send_hint, UInt<1>("h00")) @[ICache.scala 180:40]
    node refill_fire = and(_refill_fire_T, _refill_fire_T_1) @[ICache.scala 180:37]
    reg hint_outstanding : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[ICache.scala 181:33]
    node _s2_miss_T = eq(s2_hit, UInt<1>("h00")) @[ICache.scala 182:29]
    node _s2_miss_T_1 = and(s2_valid, _s2_miss_T) @[ICache.scala 182:26]
    node _s2_miss_T_2 = eq(io.s2_kill, UInt<1>("h00")) @[ICache.scala 182:40]
    node s2_miss = and(_s2_miss_T_1, _s2_miss_T_2) @[ICache.scala 182:37]
    node _s1_can_request_refill_T = or(s2_miss, refill_valid) @[ICache.scala 183:41]
    node s1_can_request_refill = eq(_s1_can_request_refill_T, UInt<1>("h00")) @[ICache.scala 183:31]
    reg s2_request_refill_REG : UInt<1>, clock @[ICache.scala 184:45]
    s2_request_refill_REG <= s1_can_request_refill @[ICache.scala 184:45]
    node s2_request_refill = and(s2_miss, s2_request_refill_REG) @[ICache.scala 184:35]
    node _refill_paddr_T = and(s1_valid, s1_can_request_refill) @[ICache.scala 185:54]
    reg refill_paddr : UInt<32>, clock @[Reg.scala 15:16]
    when _refill_paddr_T : @[Reg.scala 16:19]
      refill_paddr <= io.s1_paddr @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    node _refill_vaddr_T = and(s1_valid, s1_can_request_refill) @[ICache.scala 186:51]
    reg refill_vaddr : UInt<39>, clock @[Reg.scala 15:16]
    when _refill_vaddr_T : @[Reg.scala 16:19]
      refill_vaddr <= s1_vaddr @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    node refill_tag = shr(refill_paddr, 12) @[ICache.scala 187:33]
    node refill_idx = bits(refill_paddr, 11, 6) @[ICache.scala 486:21]
    node _refill_one_beat_T = and(tl_out.d.ready, tl_out.d.valid) @[Decoupled.scala 40:37]
    node refill_one_beat_opdata = bits(tl_out.d.bits.opcode, 0, 0) @[Edges.scala 105:36]
    node refill_one_beat = and(_refill_one_beat_T, refill_one_beat_opdata) @[ICache.scala 189:41]
    node _io_req_ready_T = or(refill_one_beat, UInt<1>("h00")) @[ICache.scala 191:37]
    node _io_req_ready_T_1 = or(_io_req_ready_T, s3_slaveValid) @[ICache.scala 191:54]
    node _io_req_ready_T_2 = eq(_io_req_ready_T_1, UInt<1>("h00")) @[ICache.scala 191:19]
    io.req.ready <= _io_req_ready_T_2 @[ICache.scala 191:16]
    s1_valid <= s0_valid @[ICache.scala 192:12]
    node _T = and(tl_out.d.ready, tl_out.d.valid) @[Decoupled.scala 40:37]
    node _beats1_decode_T = asUInt(asSInt(UInt<12>("h0fff"))) @[package.scala 234:70]
    node _beats1_decode_T_1 = dshl(_beats1_decode_T, tl_out.d.bits.size) @[package.scala 234:77]
    node _beats1_decode_T_2 = bits(_beats1_decode_T_1, 11, 0) @[package.scala 234:82]
    node _beats1_decode_T_3 = not(_beats1_decode_T_2) @[package.scala 234:46]
    node beats1_decode = shr(_beats1_decode_T_3, 3) @[Edges.scala 219:59]
    node beats1_opdata = bits(tl_out.d.bits.opcode, 0, 0) @[Edges.scala 105:36]
    node beats1 = mux(beats1_opdata, beats1_decode, UInt<1>("h00")) @[Edges.scala 220:14]
    reg counter : UInt<9>, clock with : (reset => (reset, UInt<9>("h00"))) @[Edges.scala 228:27]
    node _counter1_T = sub(counter, UInt<1>("h01")) @[Edges.scala 229:28]
    node counter1 = tail(_counter1_T, 1) @[Edges.scala 229:28]
    node first = eq(counter, UInt<1>("h00")) @[Edges.scala 230:25]
    node _last_T = eq(counter, UInt<1>("h01")) @[Edges.scala 231:25]
    node _last_T_1 = eq(beats1, UInt<1>("h00")) @[Edges.scala 231:47]
    node last = or(_last_T, _last_T_1) @[Edges.scala 231:37]
    node d_done = and(last, _T) @[Edges.scala 232:22]
    node _count_T = not(counter1) @[Edges.scala 233:27]
    node refill_cnt = and(beats1, _count_T) @[Edges.scala 233:25]
    when _T : @[Edges.scala 234:17]
      node _counter_T = mux(first, beats1, counter1) @[Edges.scala 235:21]
      counter <= _counter_T @[Edges.scala 235:15]
      skip @[Edges.scala 234:17]
    node refill_done = and(refill_one_beat, d_done) @[ICache.scala 195:37]
    node _bundleOut_0_d_ready_T = eq(s3_slaveValid, UInt<1>("h00")) @[ICache.scala 196:21]
    tl_out.d.ready <= _bundleOut_0_d_ready_T @[ICache.scala 196:18]
    inst repl_way_v0_prng of MaxPeriodFibonacciLFSR_1 @[PRNG.scala 82:22]
    repl_way_v0_prng.clock <= clock
    repl_way_v0_prng.reset <= reset
    repl_way_v0_prng.io.seed.valid <= UInt<1>("h00") @[PRNG.scala 83:24]
    repl_way_v0_prng.io.seed.bits[0] is invalid @[PRNG.scala 84:23]
    repl_way_v0_prng.io.seed.bits[1] is invalid @[PRNG.scala 84:23]
    repl_way_v0_prng.io.seed.bits[2] is invalid @[PRNG.scala 84:23]
    repl_way_v0_prng.io.seed.bits[3] is invalid @[PRNG.scala 84:23]
    repl_way_v0_prng.io.seed.bits[4] is invalid @[PRNG.scala 84:23]
    repl_way_v0_prng.io.seed.bits[5] is invalid @[PRNG.scala 84:23]
    repl_way_v0_prng.io.seed.bits[6] is invalid @[PRNG.scala 84:23]
    repl_way_v0_prng.io.seed.bits[7] is invalid @[PRNG.scala 84:23]
    repl_way_v0_prng.io.seed.bits[8] is invalid @[PRNG.scala 84:23]
    repl_way_v0_prng.io.seed.bits[9] is invalid @[PRNG.scala 84:23]
    repl_way_v0_prng.io.seed.bits[10] is invalid @[PRNG.scala 84:23]
    repl_way_v0_prng.io.seed.bits[11] is invalid @[PRNG.scala 84:23]
    repl_way_v0_prng.io.seed.bits[12] is invalid @[PRNG.scala 84:23]
    repl_way_v0_prng.io.seed.bits[13] is invalid @[PRNG.scala 84:23]
    repl_way_v0_prng.io.seed.bits[14] is invalid @[PRNG.scala 84:23]
    repl_way_v0_prng.io.seed.bits[15] is invalid @[PRNG.scala 84:23]
    repl_way_v0_prng.io.increment <= refill_fire @[PRNG.scala 85:23]
    node repl_way_v0_lo_lo_lo = cat(repl_way_v0_prng.io.out[1], repl_way_v0_prng.io.out[0]) @[PRNG.scala 86:17]
    node repl_way_v0_lo_lo_hi = cat(repl_way_v0_prng.io.out[3], repl_way_v0_prng.io.out[2]) @[PRNG.scala 86:17]
    node repl_way_v0_lo_lo = cat(repl_way_v0_lo_lo_hi, repl_way_v0_lo_lo_lo) @[PRNG.scala 86:17]
    node repl_way_v0_lo_hi_lo = cat(repl_way_v0_prng.io.out[5], repl_way_v0_prng.io.out[4]) @[PRNG.scala 86:17]
    node repl_way_v0_lo_hi_hi = cat(repl_way_v0_prng.io.out[7], repl_way_v0_prng.io.out[6]) @[PRNG.scala 86:17]
    node repl_way_v0_lo_hi = cat(repl_way_v0_lo_hi_hi, repl_way_v0_lo_hi_lo) @[PRNG.scala 86:17]
    node repl_way_v0_lo = cat(repl_way_v0_lo_hi, repl_way_v0_lo_lo) @[PRNG.scala 86:17]
    node repl_way_v0_hi_lo_lo = cat(repl_way_v0_prng.io.out[9], repl_way_v0_prng.io.out[8]) @[PRNG.scala 86:17]
    node repl_way_v0_hi_lo_hi = cat(repl_way_v0_prng.io.out[11], repl_way_v0_prng.io.out[10]) @[PRNG.scala 86:17]
    node repl_way_v0_hi_lo = cat(repl_way_v0_hi_lo_hi, repl_way_v0_hi_lo_lo) @[PRNG.scala 86:17]
    node repl_way_v0_hi_hi_lo = cat(repl_way_v0_prng.io.out[13], repl_way_v0_prng.io.out[12]) @[PRNG.scala 86:17]
    node repl_way_v0_hi_hi_hi = cat(repl_way_v0_prng.io.out[15], repl_way_v0_prng.io.out[14]) @[PRNG.scala 86:17]
    node repl_way_v0_hi_hi = cat(repl_way_v0_hi_hi_hi, repl_way_v0_hi_hi_lo) @[PRNG.scala 86:17]
    node repl_way_v0_hi = cat(repl_way_v0_hi_hi, repl_way_v0_hi_lo) @[PRNG.scala 86:17]
    node _repl_way_v0_T = cat(repl_way_v0_hi, repl_way_v0_lo) @[PRNG.scala 86:17]
    node repl_way_v0 = bits(_repl_way_v0_T, 1, 0) @[ICache.scala 201:35]
    node _repl_way_T = or(repl_way_v0, UInt<1>("h00")) @[ICache.scala 205:40]
    node _repl_way_T_1 = cat(_repl_way_T, refill_idx) @[Cat.scala 30:58]
    node _repl_way_T_2 = shl(UInt<1>("h00"), 1) @[ICache.scala 205:63]
    node _repl_way_T_3 = or(repl_way_v0, _repl_way_T_2) @[ICache.scala 205:13]
    node _repl_way_T_4 = or(repl_way_v0, UInt<2>("h02")) @[ICache.scala 205:40]
    node _repl_way_T_5 = cat(_repl_way_T_4, refill_idx) @[Cat.scala 30:58]
    node _repl_way_T_6 = shl(UInt<1>("h00"), 0) @[ICache.scala 205:63]
    node repl_way = or(_repl_way_T_3, _repl_way_T_6) @[ICache.scala 205:13]
    node _repl_way_T_7 = cat(repl_way, refill_idx) @[Cat.scala 30:58]
    node _repl_way_T_8 = eq(UInt<1>("h00"), UInt<1>("h00")) @[ICache.scala 207:12]
    node _repl_way_T_9 = asUInt(reset) @[ICache.scala 207:11]
    node _repl_way_T_10 = or(_repl_way_T_8, _repl_way_T_9) @[ICache.scala 207:11]
    node _repl_way_T_11 = eq(_repl_way_T_10, UInt<1>("h00")) @[ICache.scala 207:11]
    when _repl_way_T_11 : @[ICache.scala 207:11]
      printf(clock, UInt<1>(1), "Assertion failed\n    at ICache.scala:207 assert(!lineInScratchpad(Cat(v, refill_idx)))\n") @[ICache.scala 207:11]
      stop(clock, UInt<1>(1), 1) @[ICache.scala 207:11]
      skip @[ICache.scala 207:11]
    smem tag_array : UInt<21>[4][64], undefined @[DescribedSRAM.scala 19:26]
    node _tag_rdata_T = bits(io.req.bits.addr, 11, 6) @[ICache.scala 218:42]
    node _tag_rdata_T_1 = eq(refill_done, UInt<1>("h00")) @[ICache.scala 218:70]
    node _tag_rdata_T_2 = and(_tag_rdata_T_1, s0_valid) @[ICache.scala 218:83]
    wire _tag_rdata_WIRE : UInt @[ICache.scala 218:33]
    _tag_rdata_WIRE is invalid @[ICache.scala 218:33]
    wire tag_rdata : UInt<21>[4] @[ICache.scala 218:33]
    tag_rdata is invalid @[ICache.scala 218:33]
    _tag_rdata_WIRE is invalid @[ICache.scala 218:33]
    tag_rdata is invalid @[ICache.scala 218:33]
    when _tag_rdata_T_2 : @[ICache.scala 218:33]
      _tag_rdata_WIRE <= _tag_rdata_T @[ICache.scala 218:33]
      node _tag_rdata_T_3 = or(_tag_rdata_WIRE, UInt<6>("h00")) @[ICache.scala 218:33]
      node _tag_rdata_T_4 = bits(_tag_rdata_T_3, 5, 0) @[ICache.scala 218:33]
      read mport tag_rdata_MPORT = tag_array[_tag_rdata_T_4], clock @[ICache.scala 218:33]
      tag_rdata <- tag_rdata_MPORT @[ICache.scala 218:33]
      skip @[ICache.scala 218:33]
    reg accruedRefillError : UInt<1>, clock @[ICache.scala 219:31]
    node _refillError_T = gt(refill_cnt, UInt<1>("h00")) @[ICache.scala 220:58]
    node _refillError_T_1 = and(_refillError_T, accruedRefillError) @[ICache.scala 220:62]
    node refillError = or(tl_out.d.bits.corrupt, _refillError_T_1) @[ICache.scala 220:43]
    when refill_done : @[ICache.scala 221:22]
      node enc_tag = cat(refillError, refill_tag) @[Cat.scala 30:58]
      wire _WIRE : UInt<21>[4] @[compatibility.scala 127:12]
      _WIRE is invalid @[compatibility.scala 127:12]
      _WIRE[0] <= enc_tag @[compatibility.scala 127:12]
      _WIRE[1] <= enc_tag @[compatibility.scala 127:12]
      _WIRE[2] <= enc_tag @[compatibility.scala 127:12]
      _WIRE[3] <= enc_tag @[compatibility.scala 127:12]
      node _T_1 = eq(repl_way, UInt<1>("h00")) @[ICache.scala 224:88]
      node _T_2 = eq(repl_way, UInt<1>("h01")) @[ICache.scala 224:88]
      node _T_3 = eq(repl_way, UInt<2>("h02")) @[ICache.scala 224:88]
      node _T_4 = eq(repl_way, UInt<2>("h03")) @[ICache.scala 224:88]
      write mport MPORT = tag_array[refill_idx], clock
      when _T_1 :
        MPORT[0] <= _WIRE[0]
        skip
      when _T_2 :
        MPORT[1] <= _WIRE[1]
        skip
      when _T_3 :
        MPORT[2] <= _WIRE[2]
        skip
      when _T_4 :
        MPORT[3] <= _WIRE[3]
        skip
      skip @[ICache.scala 221:22]
    node _io_errors_bus_valid_T = and(tl_out.d.ready, tl_out.d.valid) @[Decoupled.scala 40:37]
    node _io_errors_bus_valid_T_1 = or(tl_out.d.bits.denied, tl_out.d.bits.corrupt) @[ICache.scala 228:67]
    node _io_errors_bus_valid_T_2 = and(_io_errors_bus_valid_T, _io_errors_bus_valid_T_1) @[ICache.scala 228:42]
    io.errors.bus.valid <= _io_errors_bus_valid_T_2 @[ICache.scala 228:23]
    node _io_errors_bus_bits_T = shr(refill_paddr, 6) @[ICache.scala 229:40]
    node _io_errors_bus_bits_T_1 = shl(_io_errors_bus_bits_T, 6) @[ICache.scala 229:57]
    io.errors.bus.bits <= _io_errors_bus_bits_T_1 @[ICache.scala 229:23]
    reg vb_array : UInt<256>, clock with : (reset => (reset, UInt<256>("h00"))) @[ICache.scala 231:21]
    when refill_one_beat : @[ICache.scala 232:26]
      accruedRefillError <= refillError @[ICache.scala 233:24]
      node _vb_array_T = cat(repl_way, refill_idx) @[Cat.scala 30:58]
      node _vb_array_T_1 = eq(invalidated, UInt<1>("h00")) @[ICache.scala 235:75]
      node _vb_array_T_2 = and(refill_done, _vb_array_T_1) @[ICache.scala 235:72]
      node _vb_array_T_3 = dshl(UInt<1>("h01"), _vb_array_T) @[ICache.scala 235:32]
      node _vb_array_T_4 = or(vb_array, _vb_array_T_3) @[ICache.scala 235:32]
      node _vb_array_T_5 = not(vb_array) @[ICache.scala 235:32]
      node _vb_array_T_6 = or(_vb_array_T_5, _vb_array_T_3) @[ICache.scala 235:32]
      node _vb_array_T_7 = not(_vb_array_T_6) @[ICache.scala 235:32]
      node _vb_array_T_8 = mux(_vb_array_T_2, _vb_array_T_4, _vb_array_T_7) @[ICache.scala 235:32]
      vb_array <= _vb_array_T_8 @[ICache.scala 235:14]
      skip @[ICache.scala 232:26]
    wire invalidate : UInt<1>
    invalidate is invalid
    invalidate <= io.invalidate
    when invalidate : @[ICache.scala 238:21]
      vb_array <= UInt<1>("h00") @[ICache.scala 239:14]
      invalidated <= UInt<1>("h01") @[ICache.scala 240:17]
      skip @[ICache.scala 238:21]
    wire s1_tag_disparity : UInt<1>[4] @[ICache.scala 243:30]
    s1_tag_disparity is invalid @[ICache.scala 243:30]
    wire s1_tl_error : UInt<1>[4] @[ICache.scala 244:25]
    s1_tl_error is invalid @[ICache.scala 244:25]
    wire s1_dout : UInt<32>[4] @[ICache.scala 246:21]
    s1_dout is invalid @[ICache.scala 246:21]
    reg s1s3_slaveAddr : UInt<14>, clock @[ICache.scala 249:27]
    reg s1s3_slaveData : UInt<32>, clock @[ICache.scala 250:27]
    node s1_idx = bits(io.s1_paddr, 11, 6) @[ICache.scala 486:21]
    node s1_tag = shr(io.s1_paddr, 12) @[ICache.scala 254:30]
    node _scratchpadHit_T = lt(UInt<1>("h00"), UInt<2>("h03")) @[ICache.scala 159:43]
    node _scratchpadHit_T_1 = bits(s1s3_slaveAddr, 13, 6) @[ICache.scala 160:40]
    node _scratchpadHit_T_2 = bits(s1s3_slaveAddr, 13, 12) @[package.scala 154:13]
    node _scratchpadHit_T_3 = eq(_scratchpadHit_T_2, UInt<1>("h00")) @[ICache.scala 257:91]
    node _scratchpadHit_T_4 = and(UInt<1>("h00"), _scratchpadHit_T_3) @[ICache.scala 257:58]
    node _scratchpadHit_T_5 = bits(io.s1_paddr, 13, 6) @[ICache.scala 157:90]
    node _scratchpadHit_T_6 = and(UInt<1>("h00"), UInt<1>("h00")) @[ICache.scala 157:66]
    node _scratchpadHit_T_7 = bits(io.s1_paddr, 13, 12) @[package.scala 154:13]
    node _scratchpadHit_T_8 = eq(_scratchpadHit_T_7, UInt<1>("h00")) @[ICache.scala 258:69]
    node _scratchpadHit_T_9 = and(_scratchpadHit_T_6, _scratchpadHit_T_8) @[ICache.scala 258:39]
    node _scratchpadHit_T_10 = mux(s1_slaveValid, _scratchpadHit_T_4, _scratchpadHit_T_9) @[ICache.scala 256:10]
    node scratchpadHit = and(_scratchpadHit_T, _scratchpadHit_T_10) @[ICache.scala 255:47]
    node _s1_vb_T = cat(UInt<1>("h00"), s1_idx) @[Cat.scala 30:58]
    node _s1_vb_T_1 = dshr(vb_array, _s1_vb_T) @[ICache.scala 259:25]
    node _s1_vb_T_2 = bits(_s1_vb_T_1, 0, 0) @[ICache.scala 259:25]
    node _s1_vb_T_3 = eq(s1_slaveValid, UInt<1>("h00")) @[ICache.scala 259:51]
    node s1_vb = and(_s1_vb_T_2, _s1_vb_T_3) @[ICache.scala 259:48]
    node tl_error = bits(tag_rdata[0], 20, 20) @[package.scala 154:13]
    node tag = bits(tag_rdata[0], 19, 0) @[package.scala 154:13]
    node _tagMatch_T = eq(tag, s1_tag) @[ICache.scala 262:33]
    node tagMatch = and(s1_vb, _tagMatch_T) @[ICache.scala 262:26]
    node _s1_tag_disparity_0_T = or(UInt<1>("h00"), UInt<1>("h00")) @[ECC.scala 14:27]
    node _s1_tag_disparity_0_T_1 = and(s1_vb, _s1_tag_disparity_0_T) @[ICache.scala 263:34]
    s1_tag_disparity[0] <= _s1_tag_disparity_0_T_1 @[ICache.scala 263:25]
    node _s1_tl_error_0_T = bits(tl_error, 0, 0) @[ICache.scala 264:44]
    node _s1_tl_error_0_T_1 = and(tagMatch, _s1_tl_error_0_T) @[ICache.scala 264:32]
    s1_tl_error[0] <= _s1_tl_error_0_T_1 @[ICache.scala 264:20]
    node _s1_tag_hit_0_T = or(tagMatch, scratchpadHit) @[ICache.scala 265:31]
    s1_tag_hit[0] <= _s1_tag_hit_0_T @[ICache.scala 265:19]
    node s1_idx_1 = bits(io.s1_paddr, 11, 6) @[ICache.scala 486:21]
    node s1_tag_1 = shr(io.s1_paddr, 12) @[ICache.scala 254:30]
    node _scratchpadHit_T_11 = lt(UInt<1>("h01"), UInt<2>("h03")) @[ICache.scala 159:43]
    node _scratchpadHit_T_12 = bits(s1s3_slaveAddr, 13, 6) @[ICache.scala 160:40]
    node _scratchpadHit_T_13 = bits(s1s3_slaveAddr, 13, 12) @[package.scala 154:13]
    node _scratchpadHit_T_14 = eq(_scratchpadHit_T_13, UInt<1>("h01")) @[ICache.scala 257:91]
    node _scratchpadHit_T_15 = and(UInt<1>("h00"), _scratchpadHit_T_14) @[ICache.scala 257:58]
    node _scratchpadHit_T_16 = bits(io.s1_paddr, 13, 6) @[ICache.scala 157:90]
    node _scratchpadHit_T_17 = and(UInt<1>("h00"), UInt<1>("h00")) @[ICache.scala 157:66]
    node _scratchpadHit_T_18 = bits(io.s1_paddr, 13, 12) @[package.scala 154:13]
    node _scratchpadHit_T_19 = eq(_scratchpadHit_T_18, UInt<1>("h01")) @[ICache.scala 258:69]
    node _scratchpadHit_T_20 = and(_scratchpadHit_T_17, _scratchpadHit_T_19) @[ICache.scala 258:39]
    node _scratchpadHit_T_21 = mux(s1_slaveValid, _scratchpadHit_T_15, _scratchpadHit_T_20) @[ICache.scala 256:10]
    node scratchpadHit_1 = and(_scratchpadHit_T_11, _scratchpadHit_T_21) @[ICache.scala 255:47]
    node _s1_vb_T_4 = cat(UInt<1>("h01"), s1_idx_1) @[Cat.scala 30:58]
    node _s1_vb_T_5 = dshr(vb_array, _s1_vb_T_4) @[ICache.scala 259:25]
    node _s1_vb_T_6 = bits(_s1_vb_T_5, 0, 0) @[ICache.scala 259:25]
    node _s1_vb_T_7 = eq(s1_slaveValid, UInt<1>("h00")) @[ICache.scala 259:51]
    node s1_vb_1 = and(_s1_vb_T_6, _s1_vb_T_7) @[ICache.scala 259:48]
    node tl_error_1 = bits(tag_rdata[1], 20, 20) @[package.scala 154:13]
    node tag_1 = bits(tag_rdata[1], 19, 0) @[package.scala 154:13]
    node _tagMatch_T_1 = eq(tag_1, s1_tag_1) @[ICache.scala 262:33]
    node tagMatch_1 = and(s1_vb_1, _tagMatch_T_1) @[ICache.scala 262:26]
    node _s1_tag_disparity_1_T = or(UInt<1>("h00"), UInt<1>("h00")) @[ECC.scala 14:27]
    node _s1_tag_disparity_1_T_1 = and(s1_vb_1, _s1_tag_disparity_1_T) @[ICache.scala 263:34]
    s1_tag_disparity[1] <= _s1_tag_disparity_1_T_1 @[ICache.scala 263:25]
    node _s1_tl_error_1_T = bits(tl_error_1, 0, 0) @[ICache.scala 264:44]
    node _s1_tl_error_1_T_1 = and(tagMatch_1, _s1_tl_error_1_T) @[ICache.scala 264:32]
    s1_tl_error[1] <= _s1_tl_error_1_T_1 @[ICache.scala 264:20]
    node _s1_tag_hit_1_T = or(tagMatch_1, scratchpadHit_1) @[ICache.scala 265:31]
    s1_tag_hit[1] <= _s1_tag_hit_1_T @[ICache.scala 265:19]
    node s1_idx_2 = bits(io.s1_paddr, 11, 6) @[ICache.scala 486:21]
    node s1_tag_2 = shr(io.s1_paddr, 12) @[ICache.scala 254:30]
    node _scratchpadHit_T_22 = lt(UInt<2>("h02"), UInt<2>("h03")) @[ICache.scala 159:43]
    node _scratchpadHit_T_23 = bits(s1s3_slaveAddr, 13, 6) @[ICache.scala 160:40]
    node _scratchpadHit_T_24 = bits(s1s3_slaveAddr, 13, 12) @[package.scala 154:13]
    node _scratchpadHit_T_25 = eq(_scratchpadHit_T_24, UInt<2>("h02")) @[ICache.scala 257:91]
    node _scratchpadHit_T_26 = and(UInt<1>("h00"), _scratchpadHit_T_25) @[ICache.scala 257:58]
    node _scratchpadHit_T_27 = bits(io.s1_paddr, 13, 6) @[ICache.scala 157:90]
    node _scratchpadHit_T_28 = and(UInt<1>("h00"), UInt<1>("h00")) @[ICache.scala 157:66]
    node _scratchpadHit_T_29 = bits(io.s1_paddr, 13, 12) @[package.scala 154:13]
    node _scratchpadHit_T_30 = eq(_scratchpadHit_T_29, UInt<2>("h02")) @[ICache.scala 258:69]
    node _scratchpadHit_T_31 = and(_scratchpadHit_T_28, _scratchpadHit_T_30) @[ICache.scala 258:39]
    node _scratchpadHit_T_32 = mux(s1_slaveValid, _scratchpadHit_T_26, _scratchpadHit_T_31) @[ICache.scala 256:10]
    node scratchpadHit_2 = and(_scratchpadHit_T_22, _scratchpadHit_T_32) @[ICache.scala 255:47]
    node _s1_vb_T_8 = cat(UInt<2>("h02"), s1_idx_2) @[Cat.scala 30:58]
    node _s1_vb_T_9 = dshr(vb_array, _s1_vb_T_8) @[ICache.scala 259:25]
    node _s1_vb_T_10 = bits(_s1_vb_T_9, 0, 0) @[ICache.scala 259:25]
    node _s1_vb_T_11 = eq(s1_slaveValid, UInt<1>("h00")) @[ICache.scala 259:51]
    node s1_vb_2 = and(_s1_vb_T_10, _s1_vb_T_11) @[ICache.scala 259:48]
    node tl_error_2 = bits(tag_rdata[2], 20, 20) @[package.scala 154:13]
    node tag_2 = bits(tag_rdata[2], 19, 0) @[package.scala 154:13]
    node _tagMatch_T_2 = eq(tag_2, s1_tag_2) @[ICache.scala 262:33]
    node tagMatch_2 = and(s1_vb_2, _tagMatch_T_2) @[ICache.scala 262:26]
    node _s1_tag_disparity_2_T = or(UInt<1>("h00"), UInt<1>("h00")) @[ECC.scala 14:27]
    node _s1_tag_disparity_2_T_1 = and(s1_vb_2, _s1_tag_disparity_2_T) @[ICache.scala 263:34]
    s1_tag_disparity[2] <= _s1_tag_disparity_2_T_1 @[ICache.scala 263:25]
    node _s1_tl_error_2_T = bits(tl_error_2, 0, 0) @[ICache.scala 264:44]
    node _s1_tl_error_2_T_1 = and(tagMatch_2, _s1_tl_error_2_T) @[ICache.scala 264:32]
    s1_tl_error[2] <= _s1_tl_error_2_T_1 @[ICache.scala 264:20]
    node _s1_tag_hit_2_T = or(tagMatch_2, scratchpadHit_2) @[ICache.scala 265:31]
    s1_tag_hit[2] <= _s1_tag_hit_2_T @[ICache.scala 265:19]
    node s1_idx_3 = bits(io.s1_paddr, 11, 6) @[ICache.scala 486:21]
    node s1_tag_3 = shr(io.s1_paddr, 12) @[ICache.scala 254:30]
    node _scratchpadHit_T_33 = lt(UInt<2>("h03"), UInt<2>("h03")) @[ICache.scala 159:43]
    node _scratchpadHit_T_34 = bits(s1s3_slaveAddr, 13, 6) @[ICache.scala 160:40]
    node _scratchpadHit_T_35 = bits(s1s3_slaveAddr, 13, 12) @[package.scala 154:13]
    node _scratchpadHit_T_36 = eq(_scratchpadHit_T_35, UInt<2>("h03")) @[ICache.scala 257:91]
    node _scratchpadHit_T_37 = and(UInt<1>("h00"), _scratchpadHit_T_36) @[ICache.scala 257:58]
    node _scratchpadHit_T_38 = bits(io.s1_paddr, 13, 6) @[ICache.scala 157:90]
    node _scratchpadHit_T_39 = and(UInt<1>("h00"), UInt<1>("h00")) @[ICache.scala 157:66]
    node _scratchpadHit_T_40 = bits(io.s1_paddr, 13, 12) @[package.scala 154:13]
    node _scratchpadHit_T_41 = eq(_scratchpadHit_T_40, UInt<2>("h03")) @[ICache.scala 258:69]
    node _scratchpadHit_T_42 = and(_scratchpadHit_T_39, _scratchpadHit_T_41) @[ICache.scala 258:39]
    node _scratchpadHit_T_43 = mux(s1_slaveValid, _scratchpadHit_T_37, _scratchpadHit_T_42) @[ICache.scala 256:10]
    node scratchpadHit_3 = and(_scratchpadHit_T_33, _scratchpadHit_T_43) @[ICache.scala 255:47]
    node _s1_vb_T_12 = cat(UInt<2>("h03"), s1_idx_3) @[Cat.scala 30:58]
    node _s1_vb_T_13 = dshr(vb_array, _s1_vb_T_12) @[ICache.scala 259:25]
    node _s1_vb_T_14 = bits(_s1_vb_T_13, 0, 0) @[ICache.scala 259:25]
    node _s1_vb_T_15 = eq(s1_slaveValid, UInt<1>("h00")) @[ICache.scala 259:51]
    node s1_vb_3 = and(_s1_vb_T_14, _s1_vb_T_15) @[ICache.scala 259:48]
    node tl_error_3 = bits(tag_rdata[3], 20, 20) @[package.scala 154:13]
    node tag_3 = bits(tag_rdata[3], 19, 0) @[package.scala 154:13]
    node _tagMatch_T_3 = eq(tag_3, s1_tag_3) @[ICache.scala 262:33]
    node tagMatch_3 = and(s1_vb_3, _tagMatch_T_3) @[ICache.scala 262:26]
    node _s1_tag_disparity_3_T = or(UInt<1>("h00"), UInt<1>("h00")) @[ECC.scala 14:27]
    node _s1_tag_disparity_3_T_1 = and(s1_vb_3, _s1_tag_disparity_3_T) @[ICache.scala 263:34]
    s1_tag_disparity[3] <= _s1_tag_disparity_3_T_1 @[ICache.scala 263:25]
    node _s1_tl_error_3_T = bits(tl_error_3, 0, 0) @[ICache.scala 264:44]
    node _s1_tl_error_3_T_1 = and(tagMatch_3, _s1_tl_error_3_T) @[ICache.scala 264:32]
    s1_tl_error[3] <= _s1_tl_error_3_T_1 @[ICache.scala 264:20]
    node _s1_tag_hit_3_T = or(tagMatch_3, scratchpadHit_3) @[ICache.scala 265:31]
    s1_tag_hit[3] <= _s1_tag_hit_3_T @[ICache.scala 265:19]
    node _T_5 = or(s1_valid, s1_slaveValid) @[ICache.scala 267:21]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[ICache.scala 267:10]
    node _T_7 = eq(s1_tag_disparity[0], UInt<1>("h00")) @[ICache.scala 267:109]
    node _T_8 = and(s1_tag_hit[0], _T_7) @[ICache.scala 267:106]
    node _T_9 = eq(s1_tag_disparity[1], UInt<1>("h00")) @[ICache.scala 267:109]
    node _T_10 = and(s1_tag_hit[1], _T_9) @[ICache.scala 267:106]
    node _T_11 = eq(s1_tag_disparity[2], UInt<1>("h00")) @[ICache.scala 267:109]
    node _T_12 = and(s1_tag_hit[2], _T_11) @[ICache.scala 267:106]
    node _T_13 = eq(s1_tag_disparity[3], UInt<1>("h00")) @[ICache.scala 267:109]
    node _T_14 = and(s1_tag_hit[3], _T_13) @[ICache.scala 267:106]
    node _T_15 = add(_T_8, _T_10) @[Bitwise.scala 47:55]
    node _T_16 = bits(_T_15, 1, 0) @[Bitwise.scala 47:55]
    node _T_17 = add(_T_12, _T_14) @[Bitwise.scala 47:55]
    node _T_18 = bits(_T_17, 1, 0) @[Bitwise.scala 47:55]
    node _T_19 = add(_T_16, _T_18) @[Bitwise.scala 47:55]
    node _T_20 = bits(_T_19, 2, 0) @[Bitwise.scala 47:55]
    node _T_21 = leq(_T_20, UInt<1>("h01")) @[ICache.scala 267:115]
    node _T_22 = or(_T_6, _T_21) @[ICache.scala 267:39]
    node _T_23 = asUInt(reset) @[ICache.scala 267:9]
    node _T_24 = or(_T_22, _T_23) @[ICache.scala 267:9]
    node _T_25 = eq(_T_24, UInt<1>("h00")) @[ICache.scala 267:9]
    when _T_25 : @[ICache.scala 267:9]
      printf(clock, UInt<1>(1), "Assertion failed\n    at ICache.scala:267 assert(!(s1_valid || s1_slaveValid) || PopCount(s1_tag_hit zip s1_tag_disparity map { case (h, d) => h && !d }) <= 1)\n") @[ICache.scala 267:9]
      stop(clock, UInt<1>(1), 1) @[ICache.scala 267:9]
      skip @[ICache.scala 267:9]
    smem data_arrays_0 : UInt<32>[4][512], undefined @[DescribedSRAM.scala 19:26]
    smem data_arrays_1 : UInt<32>[4][512], undefined @[DescribedSRAM.scala 19:26]
    node _s0_ren_T = bits(io.req.bits.addr, 2, 2) @[package.scala 154:13]
    node _s0_ren_T_1 = eq(_s0_ren_T, UInt<1>("h00")) @[ICache.scala 282:111]
    node _s0_ren_T_2 = and(s0_valid, _s0_ren_T_1) @[ICache.scala 284:28]
    node _s0_ren_T_3 = eq(UInt<1>("h00"), UInt<1>("h00")) @[ICache.scala 282:111]
    node _s0_ren_T_4 = and(UInt<1>("h00"), _s0_ren_T_3) @[ICache.scala 284:70]
    node s0_ren = or(_s0_ren_T_2, _s0_ren_T_4) @[ICache.scala 284:52]
    node _wen_T = eq(invalidated, UInt<1>("h00")) @[ICache.scala 285:35]
    node _wen_T_1 = and(refill_one_beat, _wen_T) @[ICache.scala 285:32]
    node _wen_T_2 = bits(s1s3_slaveAddr, 2, 2) @[package.scala 154:13]
    node _wen_T_3 = eq(_wen_T_2, UInt<1>("h00")) @[ICache.scala 282:111]
    node _wen_T_4 = and(s3_slaveValid, _wen_T_3) @[ICache.scala 285:67]
    node wen = or(_wen_T_1, _wen_T_4) @[ICache.scala 285:49]
    node _mem_idx_T = shl(refill_idx, 3) @[ICache.scala 286:52]
    node _mem_idx_T_1 = or(_mem_idx_T, refill_cnt) @[ICache.scala 286:79]
    node _mem_idx_T_2 = bits(s1s3_slaveAddr, 11, 3) @[ICache.scala 283:31]
    node _mem_idx_T_3 = bits(io.req.bits.addr, 11, 3) @[ICache.scala 283:31]
    node _mem_idx_T_4 = mux(UInt<1>("h00"), UInt<9>("h00"), _mem_idx_T_3) @[ICache.scala 288:22]
    node _mem_idx_T_5 = mux(s3_slaveValid, _mem_idx_T_2, _mem_idx_T_4) @[ICache.scala 287:22]
    node mem_idx = mux(refill_one_beat, _mem_idx_T_1, _mem_idx_T_5) @[ICache.scala 286:22]
    when wen : @[ICache.scala 290:16]
      node _data_T = bits(tl_out.d.bits.data, 31, 0) @[ICache.scala 291:71]
      node data = mux(s3_slaveValid, s1s3_slaveData, _data_T) @[ICache.scala 291:21]
      node _way_T = bits(s1s3_slaveAddr, 13, 12) @[package.scala 154:13]
      node way = mux(s3_slaveValid, _way_T, repl_way) @[ICache.scala 292:20]
      wire _WIRE_1 : UInt<32>[4] @[compatibility.scala 127:12]
      _WIRE_1 is invalid @[compatibility.scala 127:12]
      _WIRE_1[0] <= data @[compatibility.scala 127:12]
      _WIRE_1[1] <= data @[compatibility.scala 127:12]
      _WIRE_1[2] <= data @[compatibility.scala 127:12]
      _WIRE_1[3] <= data @[compatibility.scala 127:12]
      node _T_26 = eq(way, UInt<1>("h00")) @[ICache.scala 293:93]
      node _T_27 = eq(way, UInt<1>("h01")) @[ICache.scala 293:93]
      node _T_28 = eq(way, UInt<2>("h02")) @[ICache.scala 293:93]
      node _T_29 = eq(way, UInt<2>("h03")) @[ICache.scala 293:93]
      write mport MPORT_1 = data_arrays_0[mem_idx], clock
      when _T_26 :
        MPORT_1[0] <= _WIRE_1[0]
        skip
      when _T_27 :
        MPORT_1[1] <= _WIRE_1[1]
        skip
      when _T_28 :
        MPORT_1[2] <= _WIRE_1[2]
        skip
      when _T_29 :
        MPORT_1[3] <= _WIRE_1[3]
        skip
      skip @[ICache.scala 290:16]
    node _dout_T = eq(wen, UInt<1>("h00")) @[ICache.scala 295:41]
    node _dout_T_1 = and(_dout_T, s0_ren) @[ICache.scala 295:46]
    wire _dout_WIRE : UInt @[ICache.scala 295:31]
    _dout_WIRE is invalid @[ICache.scala 295:31]
    wire dout : UInt<32>[4] @[ICache.scala 295:31]
    dout is invalid @[ICache.scala 295:31]
    _dout_WIRE is invalid @[ICache.scala 295:31]
    dout is invalid @[ICache.scala 295:31]
    when _dout_T_1 : @[ICache.scala 295:31]
      _dout_WIRE <= mem_idx @[ICache.scala 295:31]
      node _dout_T_2 = or(_dout_WIRE, UInt<9>("h00")) @[ICache.scala 295:31]
      node _dout_T_3 = bits(_dout_T_2, 8, 0) @[ICache.scala 295:31]
      read mport dout_MPORT = data_arrays_0[_dout_T_3], clock @[ICache.scala 295:31]
      dout <- dout_MPORT @[ICache.scala 295:31]
      skip @[ICache.scala 295:31]
    node _T_30 = mux(s1_slaveValid, s1s3_slaveAddr, io.s1_paddr) @[ICache.scala 296:24]
    node _T_31 = bits(_T_30, 2, 2) @[package.scala 154:13]
    node _T_32 = eq(_T_31, UInt<1>("h00")) @[ICache.scala 282:111]
    when _T_32 : @[ICache.scala 296:71]
      s1_dout <- dout @[ICache.scala 297:15]
      skip @[ICache.scala 296:71]
    node _s0_ren_T_5 = bits(io.req.bits.addr, 2, 2) @[package.scala 154:13]
    node _s0_ren_T_6 = eq(_s0_ren_T_5, UInt<1>("h01")) @[ICache.scala 282:111]
    node _s0_ren_T_7 = and(s0_valid, _s0_ren_T_6) @[ICache.scala 284:28]
    node _s0_ren_T_8 = eq(UInt<1>("h00"), UInt<1>("h01")) @[ICache.scala 282:111]
    node _s0_ren_T_9 = and(UInt<1>("h00"), _s0_ren_T_8) @[ICache.scala 284:70]
    node s0_ren_1 = or(_s0_ren_T_7, _s0_ren_T_9) @[ICache.scala 284:52]
    node _wen_T_5 = eq(invalidated, UInt<1>("h00")) @[ICache.scala 285:35]
    node _wen_T_6 = and(refill_one_beat, _wen_T_5) @[ICache.scala 285:32]
    node _wen_T_7 = bits(s1s3_slaveAddr, 2, 2) @[package.scala 154:13]
    node _wen_T_8 = eq(_wen_T_7, UInt<1>("h01")) @[ICache.scala 282:111]
    node _wen_T_9 = and(s3_slaveValid, _wen_T_8) @[ICache.scala 285:67]
    node wen_1 = or(_wen_T_6, _wen_T_9) @[ICache.scala 285:49]
    node _mem_idx_T_6 = shl(refill_idx, 3) @[ICache.scala 286:52]
    node _mem_idx_T_7 = or(_mem_idx_T_6, refill_cnt) @[ICache.scala 286:79]
    node _mem_idx_T_8 = bits(s1s3_slaveAddr, 11, 3) @[ICache.scala 283:31]
    node _mem_idx_T_9 = bits(io.req.bits.addr, 11, 3) @[ICache.scala 283:31]
    node _mem_idx_T_10 = mux(UInt<1>("h00"), UInt<9>("h00"), _mem_idx_T_9) @[ICache.scala 288:22]
    node _mem_idx_T_11 = mux(s3_slaveValid, _mem_idx_T_8, _mem_idx_T_10) @[ICache.scala 287:22]
    node mem_idx_1 = mux(refill_one_beat, _mem_idx_T_7, _mem_idx_T_11) @[ICache.scala 286:22]
    when wen_1 : @[ICache.scala 290:16]
      node _data_T_1 = bits(tl_out.d.bits.data, 63, 32) @[ICache.scala 291:71]
      node data_1 = mux(s3_slaveValid, s1s3_slaveData, _data_T_1) @[ICache.scala 291:21]
      node _way_T_1 = bits(s1s3_slaveAddr, 13, 12) @[package.scala 154:13]
      node way_1 = mux(s3_slaveValid, _way_T_1, repl_way) @[ICache.scala 292:20]
      wire _WIRE_2 : UInt<32>[4] @[compatibility.scala 127:12]
      _WIRE_2 is invalid @[compatibility.scala 127:12]
      _WIRE_2[0] <= data_1 @[compatibility.scala 127:12]
      _WIRE_2[1] <= data_1 @[compatibility.scala 127:12]
      _WIRE_2[2] <= data_1 @[compatibility.scala 127:12]
      _WIRE_2[3] <= data_1 @[compatibility.scala 127:12]
      node _T_33 = eq(way_1, UInt<1>("h00")) @[ICache.scala 293:93]
      node _T_34 = eq(way_1, UInt<1>("h01")) @[ICache.scala 293:93]
      node _T_35 = eq(way_1, UInt<2>("h02")) @[ICache.scala 293:93]
      node _T_36 = eq(way_1, UInt<2>("h03")) @[ICache.scala 293:93]
      write mport MPORT_2 = data_arrays_1[mem_idx_1], clock
      when _T_33 :
        MPORT_2[0] <= _WIRE_2[0]
        skip
      when _T_34 :
        MPORT_2[1] <= _WIRE_2[1]
        skip
      when _T_35 :
        MPORT_2[2] <= _WIRE_2[2]
        skip
      when _T_36 :
        MPORT_2[3] <= _WIRE_2[3]
        skip
      skip @[ICache.scala 290:16]
    node _dout_T_4 = eq(wen_1, UInt<1>("h00")) @[ICache.scala 295:41]
    node _dout_T_5 = and(_dout_T_4, s0_ren_1) @[ICache.scala 295:46]
    wire _dout_WIRE_1 : UInt @[ICache.scala 295:31]
    _dout_WIRE_1 is invalid @[ICache.scala 295:31]
    wire dout_1 : UInt<32>[4] @[ICache.scala 295:31]
    dout_1 is invalid @[ICache.scala 295:31]
    _dout_WIRE_1 is invalid @[ICache.scala 295:31]
    dout_1 is invalid @[ICache.scala 295:31]
    when _dout_T_5 : @[ICache.scala 295:31]
      _dout_WIRE_1 <= mem_idx_1 @[ICache.scala 295:31]
      node _dout_T_6 = or(_dout_WIRE_1, UInt<9>("h00")) @[ICache.scala 295:31]
      node _dout_T_7 = bits(_dout_T_6, 8, 0) @[ICache.scala 295:31]
      read mport dout_MPORT_1 = data_arrays_1[_dout_T_7], clock @[ICache.scala 295:31]
      dout_1 <- dout_MPORT_1 @[ICache.scala 295:31]
      skip @[ICache.scala 295:31]
    node _T_37 = mux(s1_slaveValid, s1s3_slaveAddr, io.s1_paddr) @[ICache.scala 296:24]
    node _T_38 = bits(_T_37, 2, 2) @[package.scala 154:13]
    node _T_39 = eq(_T_38, UInt<1>("h01")) @[ICache.scala 282:111]
    when _T_39 : @[ICache.scala 296:71]
      s1_dout <- dout_1 @[ICache.scala 297:15]
      skip @[ICache.scala 296:71]
    wire s1s2_full_word_write : UInt<1>
    s1s2_full_word_write is invalid
    s1s2_full_word_write <= UInt<1>("h00")
    node s1_dont_read = and(s1_slaveValid, s1s2_full_word_write) @[ICache.scala 303:36]
    node s1_clk_en = or(s1_valid, s1_slaveValid) @[ICache.scala 305:28]
    wire _s2_tag_hit_WIRE : UInt<1>[4] @[ICache.scala 306:60]
    _s2_tag_hit_WIRE is invalid @[ICache.scala 306:60]
    _s2_tag_hit_WIRE[0] <= UInt<1>("h00") @[ICache.scala 306:60]
    _s2_tag_hit_WIRE[1] <= UInt<1>("h00") @[ICache.scala 306:60]
    _s2_tag_hit_WIRE[2] <= UInt<1>("h00") @[ICache.scala 306:60]
    _s2_tag_hit_WIRE[3] <= UInt<1>("h00") @[ICache.scala 306:60]
    node _s2_tag_hit_T = mux(s1_dont_read, _s2_tag_hit_WIRE, s1_tag_hit) @[ICache.scala 306:33]
    reg s2_tag_hit : UInt<1>[4], clock @[Reg.scala 15:16]
    when s1_clk_en : @[Reg.scala 16:19]
      s2_tag_hit[0] <= _s2_tag_hit_T[0] @[Reg.scala 16:23]
      s2_tag_hit[1] <= _s2_tag_hit_T[1] @[Reg.scala 16:23]
      s2_tag_hit[2] <= _s2_tag_hit_T[2] @[Reg.scala 16:23]
      s2_tag_hit[3] <= _s2_tag_hit_T[3] @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    node s2_hit_way_lo = cat(s2_tag_hit[1], s2_tag_hit[0]) @[OneHot.scala 22:45]
    node s2_hit_way_hi = cat(s2_tag_hit[3], s2_tag_hit[2]) @[OneHot.scala 22:45]
    node _s2_hit_way_T = cat(s2_hit_way_hi, s2_hit_way_lo) @[OneHot.scala 22:45]
    node s2_hit_way_hi_1 = bits(_s2_hit_way_T, 3, 2) @[OneHot.scala 30:18]
    node s2_hit_way_lo_1 = bits(_s2_hit_way_T, 1, 0) @[OneHot.scala 31:18]
    node _s2_hit_way_T_1 = orr(s2_hit_way_hi_1) @[OneHot.scala 32:14]
    node _s2_hit_way_T_2 = or(s2_hit_way_hi_1, s2_hit_way_lo_1) @[OneHot.scala 32:28]
    node _s2_hit_way_T_3 = bits(_s2_hit_way_T_2, 1, 1) @[CircuitMath.scala 30:8]
    node s2_hit_way = cat(_s2_hit_way_T_1, _s2_hit_way_T_3) @[Cat.scala 30:58]
    node _s2_scratchpad_word_addr_T = mux(s2_slaveValid, s1s3_slaveAddr, io.s2_vaddr) @[ICache.scala 308:52]
    node _s2_scratchpad_word_addr_T_1 = bits(_s2_scratchpad_word_addr_T, 11, 2) @[ICache.scala 308:96]
    node s2_scratchpad_word_addr_hi = cat(s2_hit_way, _s2_scratchpad_word_addr_T_1) @[Cat.scala 30:58]
    node s2_scratchpad_word_addr = cat(s2_scratchpad_word_addr_hi, UInt<2>("h00")) @[Cat.scala 30:58]
    reg s2_dout : UInt<32>[4], clock @[Reg.scala 15:16]
    when s1_clk_en : @[Reg.scala 16:19]
      s2_dout[0] <= s1_dout[0] @[Reg.scala 16:23]
      s2_dout[1] <= s1_dout[1] @[Reg.scala 16:23]
      s2_dout[2] <= s1_dout[2] @[Reg.scala 16:23]
      s2_dout[3] <= s1_dout[3] @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    node _s2_way_mux_T = mux(s2_tag_hit[0], s2_dout[0], UInt<1>("h00")) @[Mux.scala 27:72]
    node _s2_way_mux_T_1 = mux(s2_tag_hit[1], s2_dout[1], UInt<1>("h00")) @[Mux.scala 27:72]
    node _s2_way_mux_T_2 = mux(s2_tag_hit[2], s2_dout[2], UInt<1>("h00")) @[Mux.scala 27:72]
    node _s2_way_mux_T_3 = mux(s2_tag_hit[3], s2_dout[3], UInt<1>("h00")) @[Mux.scala 27:72]
    node _s2_way_mux_T_4 = or(_s2_way_mux_T, _s2_way_mux_T_1) @[Mux.scala 27:72]
    node _s2_way_mux_T_5 = or(_s2_way_mux_T_4, _s2_way_mux_T_2) @[Mux.scala 27:72]
    node _s2_way_mux_T_6 = or(_s2_way_mux_T_5, _s2_way_mux_T_3) @[Mux.scala 27:72]
    wire s2_way_mux : UInt<32> @[Mux.scala 27:72]
    s2_way_mux <= _s2_way_mux_T_6 @[Mux.scala 27:72]
    reg s2_tag_disparity_r : UInt<1>[4], clock @[Reg.scala 15:16]
    when s1_clk_en : @[Reg.scala 16:19]
      s2_tag_disparity_r[0] <= s1_tag_disparity[0] @[Reg.scala 16:23]
      s2_tag_disparity_r[1] <= s1_tag_disparity[1] @[Reg.scala 16:23]
      s2_tag_disparity_r[2] <= s1_tag_disparity[2] @[Reg.scala 16:23]
      s2_tag_disparity_r[3] <= s1_tag_disparity[3] @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    node s2_tag_disparity_lo = cat(s2_tag_disparity_r[1], s2_tag_disparity_r[0]) @[ICache.scala 312:65]
    node s2_tag_disparity_hi = cat(s2_tag_disparity_r[3], s2_tag_disparity_r[2]) @[ICache.scala 312:65]
    node _s2_tag_disparity_T = cat(s2_tag_disparity_hi, s2_tag_disparity_lo) @[ICache.scala 312:65]
    node s2_tag_disparity = orr(_s2_tag_disparity_T) @[ICache.scala 312:72]
    node s2_tl_error_lo = cat(s1_tl_error[1], s1_tl_error[0]) @[ICache.scala 313:43]
    node s2_tl_error_hi = cat(s1_tl_error[3], s1_tl_error[2]) @[ICache.scala 313:43]
    node _s2_tl_error_T = cat(s2_tl_error_hi, s2_tl_error_lo) @[ICache.scala 313:43]
    node _s2_tl_error_T_1 = orr(_s2_tl_error_T) @[ICache.scala 313:50]
    reg s2_tl_error : UInt<1>, clock @[Reg.scala 15:16]
    when s1_clk_en : @[Reg.scala 16:19]
      s2_tl_error <= _s2_tl_error_T_1 @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    node _s2_disparity_T = or(UInt<1>("h00"), UInt<1>("h00")) @[ECC.scala 14:27]
    node s2_disparity = or(s2_tag_disparity, _s2_disparity_T) @[ICache.scala 315:39]
    node _s1_scratchpad_hit_T = bits(s1s3_slaveAddr, 13, 6) @[ICache.scala 160:40]
    node _s1_scratchpad_hit_T_1 = bits(io.s1_paddr, 13, 6) @[ICache.scala 157:90]
    node _s1_scratchpad_hit_T_2 = and(UInt<1>("h00"), UInt<1>("h00")) @[ICache.scala 157:66]
    node s1_scratchpad_hit = mux(s1_slaveValid, UInt<1>("h00"), _s1_scratchpad_hit_T_2) @[ICache.scala 317:30]
    reg s2_scratchpad_hit : UInt<1>, clock @[Reg.scala 15:16]
    when s1_clk_en : @[Reg.scala 16:19]
      s2_scratchpad_hit <= s1_scratchpad_hit @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    node _s2_report_uncorrectable_error_T = and(s2_scratchpad_hit, UInt<1>("h00")) @[ICache.scala 319:57]
    node _s2_report_uncorrectable_error_T_1 = eq(s1s2_full_word_write, UInt<1>("h00")) @[ICache.scala 319:124]
    node _s2_report_uncorrectable_error_T_2 = and(s2_slaveValid, _s2_report_uncorrectable_error_T_1) @[ICache.scala 319:121]
    node _s2_report_uncorrectable_error_T_3 = or(s2_valid, _s2_report_uncorrectable_error_T_2) @[ICache.scala 319:103]
    node s2_report_uncorrectable_error = and(_s2_report_uncorrectable_error_T, _s2_report_uncorrectable_error_T_3) @[ICache.scala 319:90]
    node _T_40 = and(s2_valid, s2_disparity) @[ICache.scala 334:22]
    when _T_40 : @[ICache.scala 334:39]
      invalidate <= UInt<1>("h01") @[ICache.scala 334:52]
      skip @[ICache.scala 334:39]
    io.resp.bits.data <= s2_way_mux @[ICache.scala 336:25]
    io.resp.bits.ae <= s2_tl_error @[ICache.scala 337:23]
    io.resp.bits.replay <= s2_disparity @[ICache.scala 338:27]
    node _io_resp_valid_T = and(s2_valid, s2_hit) @[ICache.scala 339:33]
    io.resp.valid <= _io_resp_valid_T @[ICache.scala 339:21]
    tl_out.a.valid <= s2_request_refill @[ICache.scala 418:18]
    node _bundleOut_0_a_bits_T = shr(refill_paddr, 6) @[ICache.scala 421:47]
    node _bundleOut_0_a_bits_T_1 = shl(_bundleOut_0_a_bits_T, 6) @[ICache.scala 421:64]
    node _bundleOut_0_a_bits_legal_T = leq(UInt<1>("h00"), UInt<3>("h06")) @[Parameters.scala 92:32]
    node _bundleOut_0_a_bits_legal_T_1 = leq(UInt<3>("h06"), UInt<4>("h0c")) @[Parameters.scala 92:42]
    node _bundleOut_0_a_bits_legal_T_2 = and(_bundleOut_0_a_bits_legal_T, _bundleOut_0_a_bits_legal_T_1) @[Parameters.scala 92:37]
    node _bundleOut_0_a_bits_legal_T_3 = or(UInt<1>("h00"), _bundleOut_0_a_bits_legal_T_2) @[Parameters.scala 670:31]
    node _bundleOut_0_a_bits_legal_T_4 = xor(_bundleOut_0_a_bits_T_1, UInt<14>("h02000")) @[Parameters.scala 137:31]
    node _bundleOut_0_a_bits_legal_T_5 = cvt(_bundleOut_0_a_bits_legal_T_4) @[Parameters.scala 137:49]
    node _bundleOut_0_a_bits_legal_T_6 = and(_bundleOut_0_a_bits_legal_T_5, asSInt(UInt<33>("h0ca012000"))) @[Parameters.scala 137:52]
    node _bundleOut_0_a_bits_legal_T_7 = asSInt(_bundleOut_0_a_bits_legal_T_6) @[Parameters.scala 137:52]
    node _bundleOut_0_a_bits_legal_T_8 = eq(_bundleOut_0_a_bits_legal_T_7, asSInt(UInt<1>("h00"))) @[Parameters.scala 137:67]
    node _bundleOut_0_a_bits_legal_T_9 = and(_bundleOut_0_a_bits_legal_T_3, _bundleOut_0_a_bits_legal_T_8) @[Parameters.scala 670:56]
    node _bundleOut_0_a_bits_legal_T_10 = leq(UInt<1>("h00"), UInt<3>("h06")) @[Parameters.scala 92:32]
    node _bundleOut_0_a_bits_legal_T_11 = leq(UInt<3>("h06"), UInt<3>("h06")) @[Parameters.scala 92:42]
    node _bundleOut_0_a_bits_legal_T_12 = and(_bundleOut_0_a_bits_legal_T_10, _bundleOut_0_a_bits_legal_T_11) @[Parameters.scala 92:37]
    node _bundleOut_0_a_bits_legal_T_13 = or(UInt<1>("h00"), _bundleOut_0_a_bits_legal_T_12) @[Parameters.scala 670:31]
    node _bundleOut_0_a_bits_legal_T_14 = xor(_bundleOut_0_a_bits_T_1, UInt<1>("h00")) @[Parameters.scala 137:31]
    node _bundleOut_0_a_bits_legal_T_15 = cvt(_bundleOut_0_a_bits_legal_T_14) @[Parameters.scala 137:49]
    node _bundleOut_0_a_bits_legal_T_16 = and(_bundleOut_0_a_bits_legal_T_15, asSInt(UInt<33>("h0ca012000"))) @[Parameters.scala 137:52]
    node _bundleOut_0_a_bits_legal_T_17 = asSInt(_bundleOut_0_a_bits_legal_T_16) @[Parameters.scala 137:52]
    node _bundleOut_0_a_bits_legal_T_18 = eq(_bundleOut_0_a_bits_legal_T_17, asSInt(UInt<1>("h00"))) @[Parameters.scala 137:67]
    node _bundleOut_0_a_bits_legal_T_19 = xor(_bundleOut_0_a_bits_T_1, UInt<17>("h010000")) @[Parameters.scala 137:31]
    node _bundleOut_0_a_bits_legal_T_20 = cvt(_bundleOut_0_a_bits_legal_T_19) @[Parameters.scala 137:49]
    node _bundleOut_0_a_bits_legal_T_21 = and(_bundleOut_0_a_bits_legal_T_20, asSInt(UInt<33>("h0ca010000"))) @[Parameters.scala 137:52]
    node _bundleOut_0_a_bits_legal_T_22 = asSInt(_bundleOut_0_a_bits_legal_T_21) @[Parameters.scala 137:52]
    node _bundleOut_0_a_bits_legal_T_23 = eq(_bundleOut_0_a_bits_legal_T_22, asSInt(UInt<1>("h00"))) @[Parameters.scala 137:67]
    node _bundleOut_0_a_bits_legal_T_24 = xor(_bundleOut_0_a_bits_T_1, UInt<26>("h02000000")) @[Parameters.scala 137:31]
    node _bundleOut_0_a_bits_legal_T_25 = cvt(_bundleOut_0_a_bits_legal_T_24) @[Parameters.scala 137:49]
    node _bundleOut_0_a_bits_legal_T_26 = and(_bundleOut_0_a_bits_legal_T_25, asSInt(UInt<33>("h0ca010000"))) @[Parameters.scala 137:52]
    node _bundleOut_0_a_bits_legal_T_27 = asSInt(_bundleOut_0_a_bits_legal_T_26) @[Parameters.scala 137:52]
    node _bundleOut_0_a_bits_legal_T_28 = eq(_bundleOut_0_a_bits_legal_T_27, asSInt(UInt<1>("h00"))) @[Parameters.scala 137:67]
    node _bundleOut_0_a_bits_legal_T_29 = xor(_bundleOut_0_a_bits_T_1, UInt<28>("h08000000")) @[Parameters.scala 137:31]
    node _bundleOut_0_a_bits_legal_T_30 = cvt(_bundleOut_0_a_bits_legal_T_29) @[Parameters.scala 137:49]
    node _bundleOut_0_a_bits_legal_T_31 = and(_bundleOut_0_a_bits_legal_T_30, asSInt(UInt<33>("h0c8000000"))) @[Parameters.scala 137:52]
    node _bundleOut_0_a_bits_legal_T_32 = asSInt(_bundleOut_0_a_bits_legal_T_31) @[Parameters.scala 137:52]
    node _bundleOut_0_a_bits_legal_T_33 = eq(_bundleOut_0_a_bits_legal_T_32, asSInt(UInt<1>("h00"))) @[Parameters.scala 137:67]
    node _bundleOut_0_a_bits_legal_T_34 = xor(_bundleOut_0_a_bits_T_1, UInt<31>("h040000000")) @[Parameters.scala 137:31]
    node _bundleOut_0_a_bits_legal_T_35 = cvt(_bundleOut_0_a_bits_legal_T_34) @[Parameters.scala 137:49]
    node _bundleOut_0_a_bits_legal_T_36 = and(_bundleOut_0_a_bits_legal_T_35, asSInt(UInt<33>("h0c0000000"))) @[Parameters.scala 137:52]
    node _bundleOut_0_a_bits_legal_T_37 = asSInt(_bundleOut_0_a_bits_legal_T_36) @[Parameters.scala 137:52]
    node _bundleOut_0_a_bits_legal_T_38 = eq(_bundleOut_0_a_bits_legal_T_37, asSInt(UInt<1>("h00"))) @[Parameters.scala 137:67]
    node _bundleOut_0_a_bits_legal_T_39 = xor(_bundleOut_0_a_bits_T_1, UInt<32>("h080000000")) @[Parameters.scala 137:31]
    node _bundleOut_0_a_bits_legal_T_40 = cvt(_bundleOut_0_a_bits_legal_T_39) @[Parameters.scala 137:49]
    node _bundleOut_0_a_bits_legal_T_41 = and(_bundleOut_0_a_bits_legal_T_40, asSInt(UInt<33>("h0c0000000"))) @[Parameters.scala 137:52]
    node _bundleOut_0_a_bits_legal_T_42 = asSInt(_bundleOut_0_a_bits_legal_T_41) @[Parameters.scala 137:52]
    node _bundleOut_0_a_bits_legal_T_43 = eq(_bundleOut_0_a_bits_legal_T_42, asSInt(UInt<1>("h00"))) @[Parameters.scala 137:67]
    node _bundleOut_0_a_bits_legal_T_44 = or(_bundleOut_0_a_bits_legal_T_18, _bundleOut_0_a_bits_legal_T_23) @[Parameters.scala 671:42]
    node _bundleOut_0_a_bits_legal_T_45 = or(_bundleOut_0_a_bits_legal_T_44, _bundleOut_0_a_bits_legal_T_28) @[Parameters.scala 671:42]
    node _bundleOut_0_a_bits_legal_T_46 = or(_bundleOut_0_a_bits_legal_T_45, _bundleOut_0_a_bits_legal_T_33) @[Parameters.scala 671:42]
    node _bundleOut_0_a_bits_legal_T_47 = or(_bundleOut_0_a_bits_legal_T_46, _bundleOut_0_a_bits_legal_T_38) @[Parameters.scala 671:42]
    node _bundleOut_0_a_bits_legal_T_48 = or(_bundleOut_0_a_bits_legal_T_47, _bundleOut_0_a_bits_legal_T_43) @[Parameters.scala 671:42]
    node _bundleOut_0_a_bits_legal_T_49 = and(_bundleOut_0_a_bits_legal_T_13, _bundleOut_0_a_bits_legal_T_48) @[Parameters.scala 670:56]
    node _bundleOut_0_a_bits_legal_T_50 = or(UInt<1>("h00"), _bundleOut_0_a_bits_legal_T_9) @[Parameters.scala 672:30]
    node bundleOut_0_a_bits_legal = or(_bundleOut_0_a_bits_legal_T_50, _bundleOut_0_a_bits_legal_T_49) @[Parameters.scala 672:30]
    wire bundleOut_0_a_bits_a : {opcode : UInt<3>, param : UInt<3>, size : UInt<4>, source : UInt<1>, address : UInt<32>, user : {}, echo : {}, mask : UInt<8>, data : UInt<64>, corrupt : UInt<1>} @[Edges.scala 447:17]
    bundleOut_0_a_bits_a is invalid @[Edges.scala 447:17]
    bundleOut_0_a_bits_a.opcode <= UInt<3>("h04") @[Edges.scala 448:15]
    bundleOut_0_a_bits_a.param <= UInt<1>("h00") @[Edges.scala 449:15]
    bundleOut_0_a_bits_a.size <= UInt<3>("h06") @[Edges.scala 450:15]
    bundleOut_0_a_bits_a.source <= UInt<1>("h00") @[Edges.scala 451:15]
    bundleOut_0_a_bits_a.address <= _bundleOut_0_a_bits_T_1 @[Edges.scala 452:15]
    node _bundleOut_0_a_bits_a_mask_sizeOH_T = or(UInt<3>("h06"), UInt<3>("h00")) @[Misc.scala 201:34]
    node bundleOut_0_a_bits_a_mask_sizeOH_shiftAmount = bits(_bundleOut_0_a_bits_a_mask_sizeOH_T, 1, 0) @[OneHot.scala 64:49]
    node _bundleOut_0_a_bits_a_mask_sizeOH_T_1 = dshl(UInt<1>("h01"), bundleOut_0_a_bits_a_mask_sizeOH_shiftAmount) @[OneHot.scala 65:12]
    node _bundleOut_0_a_bits_a_mask_sizeOH_T_2 = bits(_bundleOut_0_a_bits_a_mask_sizeOH_T_1, 2, 0) @[OneHot.scala 65:27]
    node bundleOut_0_a_bits_a_mask_sizeOH = or(_bundleOut_0_a_bits_a_mask_sizeOH_T_2, UInt<1>("h01")) @[Misc.scala 201:81]
    node _bundleOut_0_a_bits_a_mask_T = geq(UInt<3>("h06"), UInt<2>("h03")) @[Misc.scala 205:21]
    node bundleOut_0_a_bits_a_mask_size = bits(bundleOut_0_a_bits_a_mask_sizeOH, 2, 2) @[Misc.scala 208:26]
    node bundleOut_0_a_bits_a_mask_bit = bits(_bundleOut_0_a_bits_T_1, 2, 2) @[Misc.scala 209:26]
    node bundleOut_0_a_bits_a_mask_nbit = eq(bundleOut_0_a_bits_a_mask_bit, UInt<1>("h00")) @[Misc.scala 210:20]
    node bundleOut_0_a_bits_a_mask_eq = and(UInt<1>("h01"), bundleOut_0_a_bits_a_mask_nbit) @[Misc.scala 213:27]
    node _bundleOut_0_a_bits_a_mask_acc_T = and(bundleOut_0_a_bits_a_mask_size, bundleOut_0_a_bits_a_mask_eq) @[Misc.scala 214:38]
    node bundleOut_0_a_bits_a_mask_acc = or(_bundleOut_0_a_bits_a_mask_T, _bundleOut_0_a_bits_a_mask_acc_T) @[Misc.scala 214:29]
    node bundleOut_0_a_bits_a_mask_eq_1 = and(UInt<1>("h01"), bundleOut_0_a_bits_a_mask_bit) @[Misc.scala 213:27]
    node _bundleOut_0_a_bits_a_mask_acc_T_1 = and(bundleOut_0_a_bits_a_mask_size, bundleOut_0_a_bits_a_mask_eq_1) @[Misc.scala 214:38]
    node bundleOut_0_a_bits_a_mask_acc_1 = or(_bundleOut_0_a_bits_a_mask_T, _bundleOut_0_a_bits_a_mask_acc_T_1) @[Misc.scala 214:29]
    node bundleOut_0_a_bits_a_mask_size_1 = bits(bundleOut_0_a_bits_a_mask_sizeOH, 1, 1) @[Misc.scala 208:26]
    node bundleOut_0_a_bits_a_mask_bit_1 = bits(_bundleOut_0_a_bits_T_1, 1, 1) @[Misc.scala 209:26]
    node bundleOut_0_a_bits_a_mask_nbit_1 = eq(bundleOut_0_a_bits_a_mask_bit_1, UInt<1>("h00")) @[Misc.scala 210:20]
    node bundleOut_0_a_bits_a_mask_eq_2 = and(bundleOut_0_a_bits_a_mask_eq, bundleOut_0_a_bits_a_mask_nbit_1) @[Misc.scala 213:27]
    node _bundleOut_0_a_bits_a_mask_acc_T_2 = and(bundleOut_0_a_bits_a_mask_size_1, bundleOut_0_a_bits_a_mask_eq_2) @[Misc.scala 214:38]
    node bundleOut_0_a_bits_a_mask_acc_2 = or(bundleOut_0_a_bits_a_mask_acc, _bundleOut_0_a_bits_a_mask_acc_T_2) @[Misc.scala 214:29]
    node bundleOut_0_a_bits_a_mask_eq_3 = and(bundleOut_0_a_bits_a_mask_eq, bundleOut_0_a_bits_a_mask_bit_1) @[Misc.scala 213:27]
    node _bundleOut_0_a_bits_a_mask_acc_T_3 = and(bundleOut_0_a_bits_a_mask_size_1, bundleOut_0_a_bits_a_mask_eq_3) @[Misc.scala 214:38]
    node bundleOut_0_a_bits_a_mask_acc_3 = or(bundleOut_0_a_bits_a_mask_acc, _bundleOut_0_a_bits_a_mask_acc_T_3) @[Misc.scala 214:29]
    node bundleOut_0_a_bits_a_mask_eq_4 = and(bundleOut_0_a_bits_a_mask_eq_1, bundleOut_0_a_bits_a_mask_nbit_1) @[Misc.scala 213:27]
    node _bundleOut_0_a_bits_a_mask_acc_T_4 = and(bundleOut_0_a_bits_a_mask_size_1, bundleOut_0_a_bits_a_mask_eq_4) @[Misc.scala 214:38]
    node bundleOut_0_a_bits_a_mask_acc_4 = or(bundleOut_0_a_bits_a_mask_acc_1, _bundleOut_0_a_bits_a_mask_acc_T_4) @[Misc.scala 214:29]
    node bundleOut_0_a_bits_a_mask_eq_5 = and(bundleOut_0_a_bits_a_mask_eq_1, bundleOut_0_a_bits_a_mask_bit_1) @[Misc.scala 213:27]
    node _bundleOut_0_a_bits_a_mask_acc_T_5 = and(bundleOut_0_a_bits_a_mask_size_1, bundleOut_0_a_bits_a_mask_eq_5) @[Misc.scala 214:38]
    node bundleOut_0_a_bits_a_mask_acc_5 = or(bundleOut_0_a_bits_a_mask_acc_1, _bundleOut_0_a_bits_a_mask_acc_T_5) @[Misc.scala 214:29]
    node bundleOut_0_a_bits_a_mask_size_2 = bits(bundleOut_0_a_bits_a_mask_sizeOH, 0, 0) @[Misc.scala 208:26]
    node bundleOut_0_a_bits_a_mask_bit_2 = bits(_bundleOut_0_a_bits_T_1, 0, 0) @[Misc.scala 209:26]
    node bundleOut_0_a_bits_a_mask_nbit_2 = eq(bundleOut_0_a_bits_a_mask_bit_2, UInt<1>("h00")) @[Misc.scala 210:20]
    node bundleOut_0_a_bits_a_mask_eq_6 = and(bundleOut_0_a_bits_a_mask_eq_2, bundleOut_0_a_bits_a_mask_nbit_2) @[Misc.scala 213:27]
    node _bundleOut_0_a_bits_a_mask_acc_T_6 = and(bundleOut_0_a_bits_a_mask_size_2, bundleOut_0_a_bits_a_mask_eq_6) @[Misc.scala 214:38]
    node bundleOut_0_a_bits_a_mask_acc_6 = or(bundleOut_0_a_bits_a_mask_acc_2, _bundleOut_0_a_bits_a_mask_acc_T_6) @[Misc.scala 214:29]
    node bundleOut_0_a_bits_a_mask_eq_7 = and(bundleOut_0_a_bits_a_mask_eq_2, bundleOut_0_a_bits_a_mask_bit_2) @[Misc.scala 213:27]
    node _bundleOut_0_a_bits_a_mask_acc_T_7 = and(bundleOut_0_a_bits_a_mask_size_2, bundleOut_0_a_bits_a_mask_eq_7) @[Misc.scala 214:38]
    node bundleOut_0_a_bits_a_mask_acc_7 = or(bundleOut_0_a_bits_a_mask_acc_2, _bundleOut_0_a_bits_a_mask_acc_T_7) @[Misc.scala 214:29]
    node bundleOut_0_a_bits_a_mask_eq_8 = and(bundleOut_0_a_bits_a_mask_eq_3, bundleOut_0_a_bits_a_mask_nbit_2) @[Misc.scala 213:27]
    node _bundleOut_0_a_bits_a_mask_acc_T_8 = and(bundleOut_0_a_bits_a_mask_size_2, bundleOut_0_a_bits_a_mask_eq_8) @[Misc.scala 214:38]
    node bundleOut_0_a_bits_a_mask_acc_8 = or(bundleOut_0_a_bits_a_mask_acc_3, _bundleOut_0_a_bits_a_mask_acc_T_8) @[Misc.scala 214:29]
    node bundleOut_0_a_bits_a_mask_eq_9 = and(bundleOut_0_a_bits_a_mask_eq_3, bundleOut_0_a_bits_a_mask_bit_2) @[Misc.scala 213:27]
    node _bundleOut_0_a_bits_a_mask_acc_T_9 = and(bundleOut_0_a_bits_a_mask_size_2, bundleOut_0_a_bits_a_mask_eq_9) @[Misc.scala 214:38]
    node bundleOut_0_a_bits_a_mask_acc_9 = or(bundleOut_0_a_bits_a_mask_acc_3, _bundleOut_0_a_bits_a_mask_acc_T_9) @[Misc.scala 214:29]
    node bundleOut_0_a_bits_a_mask_eq_10 = and(bundleOut_0_a_bits_a_mask_eq_4, bundleOut_0_a_bits_a_mask_nbit_2) @[Misc.scala 213:27]
    node _bundleOut_0_a_bits_a_mask_acc_T_10 = and(bundleOut_0_a_bits_a_mask_size_2, bundleOut_0_a_bits_a_mask_eq_10) @[Misc.scala 214:38]
    node bundleOut_0_a_bits_a_mask_acc_10 = or(bundleOut_0_a_bits_a_mask_acc_4, _bundleOut_0_a_bits_a_mask_acc_T_10) @[Misc.scala 214:29]
    node bundleOut_0_a_bits_a_mask_eq_11 = and(bundleOut_0_a_bits_a_mask_eq_4, bundleOut_0_a_bits_a_mask_bit_2) @[Misc.scala 213:27]
    node _bundleOut_0_a_bits_a_mask_acc_T_11 = and(bundleOut_0_a_bits_a_mask_size_2, bundleOut_0_a_bits_a_mask_eq_11) @[Misc.scala 214:38]
    node bundleOut_0_a_bits_a_mask_acc_11 = or(bundleOut_0_a_bits_a_mask_acc_4, _bundleOut_0_a_bits_a_mask_acc_T_11) @[Misc.scala 214:29]
    node bundleOut_0_a_bits_a_mask_eq_12 = and(bundleOut_0_a_bits_a_mask_eq_5, bundleOut_0_a_bits_a_mask_nbit_2) @[Misc.scala 213:27]
    node _bundleOut_0_a_bits_a_mask_acc_T_12 = and(bundleOut_0_a_bits_a_mask_size_2, bundleOut_0_a_bits_a_mask_eq_12) @[Misc.scala 214:38]
    node bundleOut_0_a_bits_a_mask_acc_12 = or(bundleOut_0_a_bits_a_mask_acc_5, _bundleOut_0_a_bits_a_mask_acc_T_12) @[Misc.scala 214:29]
    node bundleOut_0_a_bits_a_mask_eq_13 = and(bundleOut_0_a_bits_a_mask_eq_5, bundleOut_0_a_bits_a_mask_bit_2) @[Misc.scala 213:27]
    node _bundleOut_0_a_bits_a_mask_acc_T_13 = and(bundleOut_0_a_bits_a_mask_size_2, bundleOut_0_a_bits_a_mask_eq_13) @[Misc.scala 214:38]
    node bundleOut_0_a_bits_a_mask_acc_13 = or(bundleOut_0_a_bits_a_mask_acc_5, _bundleOut_0_a_bits_a_mask_acc_T_13) @[Misc.scala 214:29]
    node bundleOut_0_a_bits_a_mask_lo_lo = cat(bundleOut_0_a_bits_a_mask_acc_7, bundleOut_0_a_bits_a_mask_acc_6) @[Cat.scala 30:58]
    node bundleOut_0_a_bits_a_mask_lo_hi = cat(bundleOut_0_a_bits_a_mask_acc_9, bundleOut_0_a_bits_a_mask_acc_8) @[Cat.scala 30:58]
    node bundleOut_0_a_bits_a_mask_lo = cat(bundleOut_0_a_bits_a_mask_lo_hi, bundleOut_0_a_bits_a_mask_lo_lo) @[Cat.scala 30:58]
    node bundleOut_0_a_bits_a_mask_hi_lo = cat(bundleOut_0_a_bits_a_mask_acc_11, bundleOut_0_a_bits_a_mask_acc_10) @[Cat.scala 30:58]
    node bundleOut_0_a_bits_a_mask_hi_hi = cat(bundleOut_0_a_bits_a_mask_acc_13, bundleOut_0_a_bits_a_mask_acc_12) @[Cat.scala 30:58]
    node bundleOut_0_a_bits_a_mask_hi = cat(bundleOut_0_a_bits_a_mask_hi_hi, bundleOut_0_a_bits_a_mask_hi_lo) @[Cat.scala 30:58]
    node _bundleOut_0_a_bits_a_mask_T_1 = cat(bundleOut_0_a_bits_a_mask_hi, bundleOut_0_a_bits_a_mask_lo) @[Cat.scala 30:58]
    bundleOut_0_a_bits_a.mask <= _bundleOut_0_a_bits_a_mask_T_1 @[Edges.scala 453:15]
    bundleOut_0_a_bits_a.data <= UInt<1>("h00") @[Edges.scala 454:15]
    bundleOut_0_a_bits_a.corrupt <= UInt<1>("h00") @[Edges.scala 455:15]
    tl_out.a.bits <- bundleOut_0_a_bits_a @[ICache.scala 419:17]
    wire _WIRE_3 : {flip ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<2>, size : UInt<4>, source : UInt<1>, address : UInt<32>, mask : UInt<8>, data : UInt<64>, corrupt : UInt<1>}} @[Bundles.scala 256:54]
    _WIRE_3 is invalid @[Bundles.scala 256:54]
    _WIRE_3.ready <= UInt<1>("h01") @[ICache.scala 471:18]
    wire _WIRE_4 : {flip ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<3>, size : UInt<4>, source : UInt<1>, address : UInt<32>, user : {}, echo : {}, data : UInt<64>, corrupt : UInt<1>}} @[Bundles.scala 257:54]
    _WIRE_4 is invalid @[Bundles.scala 257:54]
    _WIRE_4.valid <= UInt<1>("h00") @[ICache.scala 472:18]
    wire _WIRE_5 : {flip ready : UInt<1>, valid : UInt<1>, bits : {sink : UInt<2>}} @[Bundles.scala 259:54]
    _WIRE_5 is invalid @[Bundles.scala 259:54]
    _WIRE_5.valid <= UInt<1>("h00") @[ICache.scala 473:18]
    node _T_41 = and(tl_out.a.valid, UInt<1>("h00")) @[ICache.scala 474:27]
    node _T_42 = eq(_T_41, UInt<1>("h00")) @[ICache.scala 474:10]
    node _T_43 = asUInt(reset) @[ICache.scala 474:9]
    node _T_44 = or(_T_42, _T_43) @[ICache.scala 474:9]
    node _T_45 = eq(_T_44, UInt<1>("h00")) @[ICache.scala 474:9]
    when _T_45 : @[ICache.scala 474:9]
      printf(clock, UInt<1>(1), "Assertion failed\n    at ICache.scala:474 assert(!(tl_out.a.valid && addrMaybeInScratchpad(tl_out.a.bits.address)))\n") @[ICache.scala 474:9]
      stop(clock, UInt<1>(1), 1) @[ICache.scala 474:9]
      skip @[ICache.scala 474:9]
    node _T_46 = eq(refill_valid, UInt<1>("h00")) @[ICache.scala 476:9]
    when _T_46 : @[ICache.scala 476:24]
      invalidated <= UInt<1>("h00") @[ICache.scala 476:38]
      skip @[ICache.scala 476:24]
    when refill_fire : @[ICache.scala 477:22]
      refill_valid <= UInt<1>("h01") @[ICache.scala 477:37]
      skip @[ICache.scala 477:22]
    when refill_done : @[ICache.scala 478:22]
      refill_valid <= UInt<1>("h00") @[ICache.scala 478:37]
      skip @[ICache.scala 478:22]
    io.perf.acquire <= refill_fire @[ICache.scala 480:19]
    node _io_keep_clock_enabled_T = or(UInt<1>("h00"), s1_valid) @[ICache.scala 482:117]
    node _io_keep_clock_enabled_T_1 = or(_io_keep_clock_enabled_T, s2_valid) @[ICache.scala 483:14]
    node _io_keep_clock_enabled_T_2 = or(_io_keep_clock_enabled_T_1, refill_valid) @[ICache.scala 483:26]
    node _io_keep_clock_enabled_T_3 = or(_io_keep_clock_enabled_T_2, send_hint) @[ICache.scala 483:42]
    node _io_keep_clock_enabled_T_4 = or(_io_keep_clock_enabled_T_3, hint_outstanding) @[ICache.scala 483:55]
    io.keep_clock_enabled <= _io_keep_clock_enabled_T_4 @[ICache.scala 481:25]
    node _T_47 = eq(send_hint, UInt<1>("h00")) @[ICache.scala 491:10]
    node _T_48 = eq(tl_out.a.ready, UInt<1>("h00")) @[ICache.scala 491:43]
    node _T_49 = and(tl_out.a.valid, _T_48) @[ICache.scala 491:40]
    node _T_50 = and(_T_47, _T_49) @[ICache.scala 491:21]
    node _T_51 = and(invalidate, refill_valid) @[ICache.scala 492:21]
    node _T_52 = eq(UInt<1>("h00"), UInt<1>("h00")) @[ICache.scala 499:18]
    node _T_53 = eq(UInt<1>("h00"), UInt<1>("h00")) @[ICache.scala 499:50]
    node _T_54 = and(_T_52, _T_53) @[ICache.scala 499:47]
    node _T_55 = eq(s2_slaveValid, UInt<1>("h00")) @[ICache.scala 503:18]
    node _T_56 = eq(s2_tag_disparity, UInt<1>("h00")) @[ICache.scala 507:18]
    node _T_57 = eq(s2_scratchpad_hit, UInt<1>("h00")) @[ICache.scala 512:18]
    node _T_58 = and(_T_55, s2_scratchpad_hit) @[Property.scala 81:34]
    node _T_59 = and(_T_55, _T_57) @[Property.scala 81:34]
    node _T_60 = and(s2_slaveValid, s2_scratchpad_hit) @[Property.scala 81:34]
    node _T_61 = and(s2_slaveValid, _T_57) @[Property.scala 81:34]
    node _T_62 = and(_T_56, _T_58) @[Property.scala 81:34]
    node _T_63 = and(_T_56, _T_59) @[Property.scala 81:34]
    node _T_64 = and(_T_56, _T_60) @[Property.scala 81:34]
    node _T_65 = and(_T_56, _T_61) @[Property.scala 81:34]
    node _T_66 = and(_T_55, s2_scratchpad_hit) @[Property.scala 81:34]
    node _T_67 = and(_T_55, _T_57) @[Property.scala 81:34]
    node _T_68 = and(s2_slaveValid, s2_scratchpad_hit) @[Property.scala 81:34]
    node _T_69 = and(s2_slaveValid, _T_57) @[Property.scala 81:34]
    node _T_70 = and(s2_tag_disparity, _T_66) @[Property.scala 81:34]
    node _T_71 = and(s2_tag_disparity, _T_67) @[Property.scala 81:34]
    node _T_72 = and(s2_tag_disparity, _T_68) @[Property.scala 81:34]
    node _T_73 = and(s2_tag_disparity, _T_69) @[Property.scala 81:34]
    node _T_74 = and(_T_54, _T_62) @[Property.scala 81:34]
    node _T_75 = and(_T_54, _T_63) @[Property.scala 81:34]
    node _T_76 = and(_T_54, _T_64) @[Property.scala 81:34]
    node _T_77 = and(_T_54, _T_65) @[Property.scala 81:34]
    node _T_78 = and(_T_54, _T_70) @[Property.scala 81:34]
    node _T_79 = and(_T_54, _T_71) @[Property.scala 81:34]
    node _T_80 = and(_T_54, _T_72) @[Property.scala 81:34]
    node _T_81 = and(_T_54, _T_73) @[Property.scala 81:34]
    node _T_82 = and(_T_55, s2_scratchpad_hit) @[Property.scala 81:34]
    node _T_83 = and(_T_55, _T_57) @[Property.scala 81:34]
    node _T_84 = and(s2_slaveValid, s2_scratchpad_hit) @[Property.scala 81:34]
    node _T_85 = and(s2_slaveValid, _T_57) @[Property.scala 81:34]
    node _T_86 = and(_T_56, _T_82) @[Property.scala 81:34]
    node _T_87 = and(_T_56, _T_83) @[Property.scala 81:34]
    node _T_88 = and(_T_56, _T_84) @[Property.scala 81:34]
    node _T_89 = and(_T_56, _T_85) @[Property.scala 81:34]
    node _T_90 = and(_T_55, s2_scratchpad_hit) @[Property.scala 81:34]
    node _T_91 = and(_T_55, _T_57) @[Property.scala 81:34]
    node _T_92 = and(s2_slaveValid, s2_scratchpad_hit) @[Property.scala 81:34]
    node _T_93 = and(s2_slaveValid, _T_57) @[Property.scala 81:34]
    node _T_94 = and(s2_tag_disparity, _T_90) @[Property.scala 81:34]
    node _T_95 = and(s2_tag_disparity, _T_91) @[Property.scala 81:34]
    node _T_96 = and(s2_tag_disparity, _T_92) @[Property.scala 81:34]
    node _T_97 = and(s2_tag_disparity, _T_93) @[Property.scala 81:34]
    node _T_98 = and(UInt<1>("h00"), _T_86) @[Property.scala 81:34]
    node _T_99 = and(UInt<1>("h00"), _T_87) @[Property.scala 81:34]
    node _T_100 = and(UInt<1>("h00"), _T_88) @[Property.scala 81:34]
    node _T_101 = and(UInt<1>("h00"), _T_89) @[Property.scala 81:34]
    node _T_102 = and(UInt<1>("h00"), _T_94) @[Property.scala 81:34]
    node _T_103 = and(UInt<1>("h00"), _T_95) @[Property.scala 81:34]
    node _T_104 = and(UInt<1>("h00"), _T_96) @[Property.scala 81:34]
    node _T_105 = and(UInt<1>("h00"), _T_97) @[Property.scala 81:34]
    node _T_106 = and(_T_55, s2_scratchpad_hit) @[Property.scala 81:34]
    node _T_107 = and(_T_55, _T_57) @[Property.scala 81:34]
    node _T_108 = and(s2_slaveValid, s2_scratchpad_hit) @[Property.scala 81:34]
    node _T_109 = and(s2_slaveValid, _T_57) @[Property.scala 81:34]
    node _T_110 = and(_T_56, _T_106) @[Property.scala 81:34]
    node _T_111 = and(_T_56, _T_107) @[Property.scala 81:34]
    node _T_112 = and(_T_56, _T_108) @[Property.scala 81:34]
    node _T_113 = and(_T_56, _T_109) @[Property.scala 81:34]
    node _T_114 = and(_T_55, s2_scratchpad_hit) @[Property.scala 81:34]
    node _T_115 = and(_T_55, _T_57) @[Property.scala 81:34]
    node _T_116 = and(s2_slaveValid, s2_scratchpad_hit) @[Property.scala 81:34]
    node _T_117 = and(s2_slaveValid, _T_57) @[Property.scala 81:34]
    node _T_118 = and(s2_tag_disparity, _T_114) @[Property.scala 81:34]
    node _T_119 = and(s2_tag_disparity, _T_115) @[Property.scala 81:34]
    node _T_120 = and(s2_tag_disparity, _T_116) @[Property.scala 81:34]
    node _T_121 = and(s2_tag_disparity, _T_117) @[Property.scala 81:34]
    node _T_122 = and(UInt<1>("h00"), _T_110) @[Property.scala 81:34]
    node _T_123 = and(UInt<1>("h00"), _T_111) @[Property.scala 81:34]
    node _T_124 = and(UInt<1>("h00"), _T_112) @[Property.scala 81:34]
    node _T_125 = and(UInt<1>("h00"), _T_113) @[Property.scala 81:34]
    node _T_126 = and(UInt<1>("h00"), _T_118) @[Property.scala 81:34]
    node _T_127 = and(UInt<1>("h00"), _T_119) @[Property.scala 81:34]
    node _T_128 = and(UInt<1>("h00"), _T_120) @[Property.scala 81:34]
    node _T_129 = and(UInt<1>("h00"), _T_121) @[Property.scala 81:34]
    node _T_130 = and(s2_valid, _T_74) @[Property.scala 81:34]
    node _T_131 = and(s2_valid, _T_75) @[Property.scala 81:34]
    node _T_132 = and(s2_valid, _T_76) @[Property.scala 81:34]
    node _T_133 = and(s2_valid, _T_77) @[Property.scala 81:34]
    node _T_134 = and(s2_valid, _T_78) @[Property.scala 81:34]
    node _T_135 = and(s2_valid, _T_79) @[Property.scala 81:34]
    node _T_136 = and(s2_valid, _T_80) @[Property.scala 81:34]
    node _T_137 = and(s2_valid, _T_81) @[Property.scala 81:34]
    node _T_138 = and(s2_valid, _T_98) @[Property.scala 81:34]
    node _T_139 = and(s2_valid, _T_99) @[Property.scala 81:34]
    node _T_140 = and(s2_valid, _T_100) @[Property.scala 81:34]
    node _T_141 = and(s2_valid, _T_101) @[Property.scala 81:34]
    node _T_142 = and(s2_valid, _T_102) @[Property.scala 81:34]
    node _T_143 = and(s2_valid, _T_103) @[Property.scala 81:34]
    node _T_144 = and(s2_valid, _T_104) @[Property.scala 81:34]
    node _T_145 = and(s2_valid, _T_105) @[Property.scala 81:34]
    node _T_146 = and(s2_valid, _T_122) @[Property.scala 81:34]
    node _T_147 = and(s2_valid, _T_123) @[Property.scala 81:34]
    node _T_148 = and(s2_valid, _T_124) @[Property.scala 81:34]
    node _T_149 = and(s2_valid, _T_125) @[Property.scala 81:34]
    node _T_150 = and(s2_valid, _T_126) @[Property.scala 81:34]
    node _T_151 = and(s2_valid, _T_127) @[Property.scala 81:34]
    node _T_152 = and(s2_valid, _T_128) @[Property.scala 81:34]
    node _T_153 = and(s2_valid, _T_129) @[Property.scala 81:34]
